// <auto-generated />
using System;
using Infrastructure.Data.Commons;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Infrastructure.Migrations
{
    [DbContext(typeof(ServerAccessibilityMonitorContext))]
    [Migration("20210621121655_init")]
    partial class init
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.6-servicing-10079")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("DomainEntities.AccessRangeAggregate.AccessRangeDetail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AccessRangeHeaderId");

                    b.Property<string>("IpFrom")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("IpTo")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<bool>("RecordStatus");

                    b.HasKey("Id");

                    b.HasIndex("AccessRangeHeaderId");

                    b.ToTable("AccessRangeDetails");
                });

            modelBuilder.Entity("DomainEntities.AccessRangeAggregate.AccessRangeHeader", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("RecordStatus");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(true);

                    b.HasKey("Id");

                    b.ToTable("AccessRangeHeaders");
                });

            modelBuilder.Entity("DomainEntities.AccessTypeAggregate.AccessType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .HasMaxLength(256)
                        .IsUnicode(true);

                    b.Property<bool>("RecordStatus");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(true);

                    b.HasKey("Id");

                    b.ToTable("AccessTypes");
                });

            modelBuilder.Entity("DomainEntities.AccessibilityAggregate.Accessibility", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("AclFilesUploadId");

                    b.Property<string>("ActionType")
                        .HasMaxLength(50)
                        .IsUnicode(true);

                    b.Property<int?>("ActionTypesId");

                    b.Property<string>("DestinationIp")
                        .HasMaxLength(50)
                        .IsUnicode(true);

                    b.Property<string>("DestinationPort")
                        .HasMaxLength(50)
                        .IsUnicode(true);

                    b.Property<int?>("DestinationServiceId");

                    b.Property<int?>("DestinationSystemId");

                    b.Property<bool>("IsTemp");

                    b.Property<string>("Port")
                        .HasMaxLength(50)
                        .IsUnicode(true);

                    b.Property<string>("Protocol")
                        .HasMaxLength(50)
                        .IsUnicode(true);

                    b.Property<int?>("ProtocolsId");

                    b.Property<bool>("RecordStatus");

                    b.Property<int?>("RouterId");

                    b.Property<int?>("ServiceId");

                    b.Property<string>("SourceIp")
                        .HasMaxLength(50)
                        .IsUnicode(true);

                    b.Property<string>("SourcePort")
                        .HasMaxLength(50)
                        .IsUnicode(true);

                    b.Property<int?>("SourceSystemId");

                    b.Property<int>("UserId");

                    b.Property<DateTime?>("VersionDate");

                    b.HasKey("Id");

                    b.HasIndex("AclFilesUploadId");

                    b.HasIndex("ActionTypesId");

                    b.HasIndex("DestinationServiceId");

                    b.HasIndex("DestinationSystemId");

                    b.HasIndex("ProtocolsId");

                    b.HasIndex("RouterId");

                    b.HasIndex("ServiceId");

                    b.HasIndex("SourceSystemId");

                    b.HasIndex("UserId");

                    b.ToTable("Accessibilities");
                });

            modelBuilder.Entity("DomainEntities.AccessibilityLevelAggregate.AccessibilityLevel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("RecordStatus");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(true);

                    b.HasKey("Id");

                    b.ToTable("AccessibilityLevels");
                });

            modelBuilder.Entity("DomainEntities.AccessibilityRequestAggregate.AccessibilityRequest", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("AccessEndDate");

                    b.Property<DateTime?>("AccessStartDate");

                    b.Property<int?>("AccessibilityTypeId");

                    b.Property<int?>("ConfirmUserId");

                    b.Property<string>("Description")
                        .HasMaxLength(250)
                        .IsUnicode(true);

                    b.Property<int?>("DestAccessibilityLevelId");

                    b.Property<string>("DestinationIp")
                        .HasMaxLength(50)
                        .IsUnicode(true);

                    b.Property<int?>("DestinationProtocolId");

                    b.Property<int?>("DestinationServiceId");

                    b.Property<int?>("DestinationSystemId");

                    b.Property<DateTime?>("LetterDate");

                    b.Property<string>("LetterNo")
                        .HasMaxLength(50)
                        .IsUnicode(true);

                    b.Property<string>("PhoneNumber")
                        .HasMaxLength(50)
                        .IsUnicode(true);

                    b.Property<bool>("RecordStatus");

                    b.Property<int?>("RequestDepartmentId");

                    b.Property<int?>("RequestingUserId");

                    b.Property<int?>("ServiceId");

                    b.Property<int?>("SourceAccessibilityLevelId");

                    b.Property<string>("SourceIp")
                        .HasMaxLength(50)
                        .IsUnicode(true);

                    b.Property<int?>("SourceProtocolId");

                    b.Property<int?>("SourceSystemId");

                    b.Property<int?>("UserDepartmentId");

                    b.HasKey("Id");

                    b.HasIndex("AccessibilityTypeId");

                    b.HasIndex("ConfirmUserId");

                    b.HasIndex("DestAccessibilityLevelId");

                    b.HasIndex("DestinationProtocolId");

                    b.HasIndex("DestinationServiceId");

                    b.HasIndex("DestinationSystemId");

                    b.HasIndex("RequestDepartmentId");

                    b.HasIndex("RequestingUserId");

                    b.HasIndex("ServiceId");

                    b.HasIndex("SourceAccessibilityLevelId");

                    b.HasIndex("SourceProtocolId");

                    b.HasIndex("SourceSystemId");

                    b.HasIndex("UserDepartmentId");

                    b.ToTable("AccessibilityRequests");
                });

            modelBuilder.Entity("DomainEntities.AclFilesRecordAggregate.AclFilesRecord", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AclFilesUploadId");

                    b.Property<string>("Action")
                        .HasMaxLength(50)
                        .IsUnicode(true);

                    b.Property<int?>("DestinationAddressTypeId");

                    b.Property<string>("DestinationIp")
                        .HasMaxLength(50)
                        .IsUnicode(true);

                    b.Property<string>("DestinationIp2")
                        .HasMaxLength(50)
                        .IsUnicode(true);

                    b.Property<string>("DestinationPort")
                        .HasMaxLength(50)
                        .IsUnicode(true);

                    b.Property<string>("Protocol")
                        .HasMaxLength(50)
                        .IsUnicode(true);

                    b.Property<bool>("RecordStatus");

                    b.Property<int?>("RouterId");

                    b.Property<string>("RouterNo")
                        .HasMaxLength(50)
                        .IsUnicode(true);

                    b.Property<int?>("SourceAddressTypeId");

                    b.Property<string>("SourceIp")
                        .HasMaxLength(50)
                        .IsUnicode(true);

                    b.Property<string>("SourceIp2")
                        .HasMaxLength(50)
                        .IsUnicode(true);

                    b.Property<string>("SourcePort")
                        .HasMaxLength(50)
                        .IsUnicode(true);

                    b.HasKey("Id");

                    b.HasIndex("AclFilesUploadId");

                    b.HasIndex("DestinationAddressTypeId");

                    b.HasIndex("RouterId");

                    b.HasIndex("SourceAddressTypeId");

                    b.ToTable("AclFilesRecords");
                });

            modelBuilder.Entity("DomainEntities.AclFilesUploadAggregate.AclFilesUpload", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .HasMaxLength(200)
                        .IsUnicode(true);

                    b.Property<string>("FileName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(true);

                    b.Property<bool>("RecordStatus");

                    b.Property<int?>("RouterId");

                    b.HasKey("Id");

                    b.HasIndex("RouterId");

                    b.ToTable("AclFilesUpload");
                });

            modelBuilder.Entity("DomainEntities.ActionTypeAggregate.ActionType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("RecordStatus");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(true);

                    b.HasKey("Id");

                    b.ToTable("ActionTypes");
                });

            modelBuilder.Entity("DomainEntities.AddressTypeAggregate.AddressType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .HasMaxLength(256)
                        .IsUnicode(true);

                    b.Property<bool>("RecordStatus");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(true);

                    b.HasKey("Id");

                    b.ToTable("AddressTypes");
                });

            modelBuilder.Entity("DomainEntities.ApplicationUserAggregate.ApplicationRole", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Name")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256);

                    b.Property<string>("PanelMenu");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("ApplicationUser_Roles");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ConcurrencyStamp = "15d0ff7d-57e4-43cc-a3bd-7c87d7b9be7d",
                            Name = "developer",
                            NormalizedName = "DEVELOPER",
                            PanelMenu = "[{\"Id\":\"li-accessibility\",\"Text\":\"تعریف دسترسی\",\"Link\":\"/Accessibilities\",\"Icon\":null,\"Items\":null},{\"Id\":\"li-accessibilityRequest\",\"Text\":\"آرشیو درخواست دسترسی\",\"Link\":\"/AccessibilityRequests\",\"Icon\":null,\"Items\":null},{\"Id\":\"li-systems\",\"Text\":\"سامانه ها\",\"Link\":\"/Systems\",\"Icon\":null,\"Items\":null},{\"Id\":\"li-aclFilesUpload\",\"Text\":\"بارگذاری فایل\",\"Link\":\"/AclFilesUploads\",\"Icon\":null,\"Items\":null},{\"Id\":\"li-policy\",\"Text\":\"قوانین\",\"Link\":\"/Policies\",\"Icon\":null,\"Items\":null},{\"Id\":\"li-report\",\"Text\":\"گزارشات\",\"Link\":null,\"Icon\":\"flaticon-list-3\",\"Items\":[{\"Id\":\"li-reportByFilter\",\"Text\":\"گزارش بر اساس پارامتر\",\"Link\":\"/Reports/ReportByFilter\",\"Icon\":null,\"Items\":null},{\"Id\":\"li-invalidFilesItem\",\"Text\":\"گزارش استثنایات\",\"Link\":\"/InvalidFileItems\",\"Icon\":null,\"Items\":null},{\"Id\":\"li-reportByCount\",\"Text\":\"گزارش دسترسی بر اساس تعداد\",\"Link\":\"/Reports/ReportByCount\",\"Icon\":null,\"Items\":null}]},{\"Id\":\"li-networkDiagram\",\"Text\":\"گراف دسترسی\",\"Link\":\"/NetworkDiagrams\",\"Icon\":null,\"Items\":null},{\"Id\":\"li-transaction\",\"Text\":\"تراکنش ها\",\"Link\":null,\"Icon\":\"flaticon-list-3\",\"Items\":[{\"Id\":\"li-excelFormat\",\"Text\":\"تعریف فرمت اکسل\",\"Link\":\"/ExcelFormats\",\"Icon\":null,\"Items\":null},{\"Id\":\"li-transactionList\",\"Text\":\"بارگذاری فایل تراکنش\",\"Link\":\"/Transactions\",\"Icon\":null,\"Items\":null},{\"Id\":\"li-transactionReport\",\"Text\":\"گزارش تراکنش ها\",\"Link\":\"/Transactions/TransactionDetailReport\",\"Icon\":null,\"Items\":null},{\"Id\":\"li-searchLog\",\"Text\":\"جستجو در تراکنش ها\",\"Link\":\"/SearchLogs/SearchLog\",\"Icon\":null,\"Items\":null},{\"Id\":\"li-abundanceReport \",\"Text\":\"گزارش فراوانی\",\"Link\":\"/SearchLogs/AbundanceReport\",\"Icon\":null,\"Items\":null},{\"Id\":\"li-sajayaReport \",\"Text\":\"گزارش سجایا\",\"Link\":\"/SearchLogs/SajayaReport\",\"Icon\":null,\"Items\":null}]},{\"Id\":\"li-transaction\",\"Text\":\"Topup تراکنش های حساب\",\"Link\":null,\"Icon\":\"flaticon-list-3\",\"Items\":[{\"Id\":\"li-excelFormat\",\"Text\":\"تعریف فرمت اکسل\",\"Link\":\"/TopupAccountExcelFormats\",\"Icon\":null,\"Items\":null},{\"Id\":\"li-transactionList\",\"Text\":\"بارگذاری فایل تراکنش\",\"Link\":\"/TopupAccountTransactions\",\"Icon\":null,\"Items\":null},{\"Id\":\"li-transactionReport\",\"Text\":\"گزارش تراکنش ها\",\"Link\":\"/TopupAccountTransactions/TransactionDetailReport\",\"Icon\":null,\"Items\":null}]},{\"Id\":\"li-transaction\",\"Text\":\"Topup تراکنش های کانال\",\"Link\":null,\"Icon\":\"flaticon-list-3\",\"Items\":[{\"Id\":\"li-excelFormat\",\"Text\":\"تعریف فرمت اکسل\",\"Link\":\"/TopupChannelExcelFormats\",\"Icon\":null,\"Items\":null},{\"Id\":\"li-transactionList\",\"Text\":\"بارگذاری فایل تراکنش\",\"Link\":\"/TopupChannelTransactions\",\"Icon\":null,\"Items\":null},{\"Id\":\"li-transactionReport\",\"Text\":\"گزارش تراکنش ها\",\"Link\":\"/TopupChannelTransactions/TransactionDetailReport\",\"Icon\":null,\"Items\":null}]},{\"Id\":\"li-base\",\"Text\":\"اطلاعات پایه\",\"Link\":null,\"Icon\":\"flaticon-list-3\",\"Items\":[{\"Id\":\"li-accessType\",\"Text\":\"نوع دسترسی\",\"Link\":\"/AccessTypes\",\"Icon\":null,\"Items\":null},{\"Id\":\"li-addressType\",\"Text\":\"نوع آدرس\",\"Link\":\"/AddressTypes\",\"Icon\":null,\"Items\":null},{\"Id\":\"li-department\",\"Text\":\"دپارتمان\",\"Link\":\"/Departments\",\"Icon\":null,\"Items\":null},{\"Id\":\"li-protocol\",\"Text\":\"پروتکل\",\"Link\":\"/Protocols\",\"Icon\":null,\"Items\":null},{\"Id\":\"li-service\",\"Text\":\"پورت(سرویس)\",\"Link\":\"/Services\",\"Icon\":null,\"Items\":null},{\"Id\":\"li-serviceGroup\",\"Text\":\"گروه سرویس\",\"Link\":\"/ServiceGroups\",\"Icon\":null,\"Items\":null},{\"Id\":\"li-actionType\",\"Text\":\"عملیات\",\"Link\":\"/ActionTypes\",\"Icon\":null,\"Items\":null},{\"Id\":\"li-router\",\"Text\":\"روتر\",\"Link\":\"/Routers\",\"Icon\":null,\"Items\":null},{\"Id\":\"li-accessRange\",\"Text\":\"محدوده دسترسی\",\"Link\":\"/AccessRanges\",\"Icon\":null,\"Items\":null},{\"Id\":\"li-authorities\",\"Text\":\"اختیار\",\"Link\":\"/Authorities\",\"Icon\":null,\"Items\":null},{\"Id\":\"li-dutyPositions\",\"Text\":\"محل خدمت\",\"Link\":\"/DutyPositions\",\"Icon\":null,\"Items\":null}]},{\"Id\":\"li-account\",\"Text\":\"ناحیه کاربری\",\"Link\":null,\"Icon\":\"flaticon-list-3\",\"Items\":[{\"Id\":\"li-users\",\"Text\":\"کاربران\",\"Link\":\"/UserManagement\",\"Icon\":null,\"Items\":null},{\"Id\":\"li-roles\",\"Text\":\"نقش\",\"Link\":\"/AccessRights\",\"Icon\":null,\"Items\":null},{\"Id\":\"li-position\",\"Text\":\"پست سازمانی\",\"Link\":\"/Positions\",\"Icon\":null,\"Items\":null},{\"Id\":\"li-changePassword\",\"Text\":\"تغییر کلمه عبور\",\"Link\":\"/UserManagement/ChangePassword\",\"Icon\":null,\"Items\":null}]}]"
                        },
                        new
                        {
                            Id = 2,
                            ConcurrencyStamp = "a1a62ada-65d4-42ef-ac91-faf6f10ca025",
                            Name = "admin",
                            NormalizedName = "ADMIN",
                            PanelMenu = "[{\"Id\":\"li-accessibility\",\"Text\":\"تعریف دسترسی\",\"Link\":\"/Accessibilities\",\"Icon\":null,\"Items\":null},{\"Id\":\"li-accessibilityRequest\",\"Text\":\"آرشیو درخواست دسترسی\",\"Link\":\"/AccessibilityRequests\",\"Icon\":null,\"Items\":null},{\"Id\":\"li-systems\",\"Text\":\"سامانه ها\",\"Link\":\"/Systems\",\"Icon\":null,\"Items\":null},{\"Id\":\"li-aclFilesUpload\",\"Text\":\"بارگذاری فایل\",\"Link\":\"/AclFilesUploads\",\"Icon\":null,\"Items\":null},{\"Id\":\"li-policy\",\"Text\":\"قوانین\",\"Link\":\"/Policies\",\"Icon\":null,\"Items\":null},{\"Id\":\"li-report\",\"Text\":\"گزارشات\",\"Link\":null,\"Icon\":\"flaticon-list-3\",\"Items\":[{\"Id\":\"li-reportByFilter\",\"Text\":\"گزارش بر اساس پارامتر\",\"Link\":\"/Reports/ReportByFilter\",\"Icon\":null,\"Items\":null},{\"Id\":\"li-invalidFilesItem\",\"Text\":\"گزارش استثنایات\",\"Link\":\"/InvalidFileItems\",\"Icon\":null,\"Items\":null},{\"Id\":\"li-reportByCount\",\"Text\":\"گزارش دسترسی بر اساس تعداد\",\"Link\":\"/Reports/ReportByCount\",\"Icon\":null,\"Items\":null}]},{\"Id\":\"li-networkDiagram\",\"Text\":\"گراف دسترسی\",\"Link\":\"/NetworkDiagrams\",\"Icon\":null,\"Items\":null},{\"Id\":\"li-transaction\",\"Text\":\"تراکنش ها\",\"Link\":null,\"Icon\":\"flaticon-list-3\",\"Items\":[{\"Id\":\"li-excelFormat\",\"Text\":\"تعریف فرمت اکسل\",\"Link\":\"/ExcelFormats\",\"Icon\":null,\"Items\":null},{\"Id\":\"li-transactionList\",\"Text\":\"بارگذاری فایل تراکنش\",\"Link\":\"/Transactions\",\"Icon\":null,\"Items\":null},{\"Id\":\"li-transactionReport\",\"Text\":\"گزارش تراکنش ها\",\"Link\":\"/Transactions/TransactionDetailReport\",\"Icon\":null,\"Items\":null},{\"Id\":\"li-searchLog\",\"Text\":\"جستجو در تراکنش ها\",\"Link\":\"/SearchLogs/SearchLog\",\"Icon\":null,\"Items\":null},{\"Id\":\"li-abundanceReport \",\"Text\":\"گزارش فراوانی\",\"Link\":\"/SearchLogs/AbundanceReport\",\"Icon\":null,\"Items\":null},{\"Id\":\"li-sajayaReport \",\"Text\":\"گزارش سجایا\",\"Link\":\"/SearchLogs/SajayaReport\",\"Icon\":null,\"Items\":null}]},{\"Id\":\"li-transaction\",\"Text\":\"Topup تراکنش های حساب\",\"Link\":null,\"Icon\":\"flaticon-list-3\",\"Items\":[{\"Id\":\"li-excelFormat\",\"Text\":\"تعریف فرمت اکسل\",\"Link\":\"/TopupAccountExcelFormats\",\"Icon\":null,\"Items\":null},{\"Id\":\"li-transactionList\",\"Text\":\"بارگذاری فایل تراکنش\",\"Link\":\"/TopupAccountTransactions\",\"Icon\":null,\"Items\":null},{\"Id\":\"li-transactionReport\",\"Text\":\"گزارش تراکنش ها\",\"Link\":\"/TopupAccountTransactions/TransactionDetailReport\",\"Icon\":null,\"Items\":null}]},{\"Id\":\"li-transaction\",\"Text\":\"Topup تراکنش های کانال\",\"Link\":null,\"Icon\":\"flaticon-list-3\",\"Items\":[{\"Id\":\"li-excelFormat\",\"Text\":\"تعریف فرمت اکسل\",\"Link\":\"/TopupChannelExcelFormats\",\"Icon\":null,\"Items\":null},{\"Id\":\"li-transactionList\",\"Text\":\"بارگذاری فایل تراکنش\",\"Link\":\"/TopupChannelTransactions\",\"Icon\":null,\"Items\":null},{\"Id\":\"li-transactionReport\",\"Text\":\"گزارش تراکنش ها\",\"Link\":\"/TopupChannelTransactions/TransactionDetailReport\",\"Icon\":null,\"Items\":null}]},{\"Id\":\"li-base\",\"Text\":\"اطلاعات پایه\",\"Link\":null,\"Icon\":\"flaticon-list-3\",\"Items\":[{\"Id\":\"li-accessType\",\"Text\":\"نوع دسترسی\",\"Link\":\"/AccessTypes\",\"Icon\":null,\"Items\":null},{\"Id\":\"li-addressType\",\"Text\":\"نوع آدرس\",\"Link\":\"/AddressTypes\",\"Icon\":null,\"Items\":null},{\"Id\":\"li-department\",\"Text\":\"دپارتمان\",\"Link\":\"/Departments\",\"Icon\":null,\"Items\":null},{\"Id\":\"li-protocol\",\"Text\":\"پروتکل\",\"Link\":\"/Protocols\",\"Icon\":null,\"Items\":null},{\"Id\":\"li-service\",\"Text\":\"پورت(سرویس)\",\"Link\":\"/Services\",\"Icon\":null,\"Items\":null},{\"Id\":\"li-serviceGroup\",\"Text\":\"گروه سرویس\",\"Link\":\"/ServiceGroups\",\"Icon\":null,\"Items\":null},{\"Id\":\"li-actionType\",\"Text\":\"عملیات\",\"Link\":\"/ActionTypes\",\"Icon\":null,\"Items\":null},{\"Id\":\"li-router\",\"Text\":\"روتر\",\"Link\":\"/Routers\",\"Icon\":null,\"Items\":null},{\"Id\":\"li-accessRange\",\"Text\":\"محدوده دسترسی\",\"Link\":\"/AccessRanges\",\"Icon\":null,\"Items\":null},{\"Id\":\"li-authorities\",\"Text\":\"اختیار\",\"Link\":\"/Authorities\",\"Icon\":null,\"Items\":null},{\"Id\":\"li-dutyPositions\",\"Text\":\"محل خدمت\",\"Link\":\"/DutyPositions\",\"Icon\":null,\"Items\":null}]},{\"Id\":\"li-account\",\"Text\":\"ناحیه کاربری\",\"Link\":null,\"Icon\":\"flaticon-list-3\",\"Items\":[{\"Id\":\"li-users\",\"Text\":\"کاربران\",\"Link\":\"/UserManagement\",\"Icon\":null,\"Items\":null},{\"Id\":\"li-roles\",\"Text\":\"نقش\",\"Link\":\"/AccessRights\",\"Icon\":null,\"Items\":null},{\"Id\":\"li-position\",\"Text\":\"پست سازمانی\",\"Link\":\"/Positions\",\"Icon\":null,\"Items\":null},{\"Id\":\"li-changePassword\",\"Text\":\"تغییر کلمه عبور\",\"Link\":\"/UserManagement/ChangePassword\",\"Icon\":null,\"Items\":null}]}]"
                        },
                        new
                        {
                            Id = 3,
                            ConcurrencyStamp = "a1a62ada-65d4-42ef-ac91-faf6f10ca025",
                            Name = "اداره حفاظت",
                            NormalizedName = "اداره حفاظت",
                            PanelMenu = "[{\"Id\":\"li-accessibility\",\"Text\":\"تعریف دسترسی\",\"Link\":\"/Accessibilities\",\"Icon\":null,\"Items\":null},{\"Id\":\"li-accessibilityRequest\",\"Text\":\"آرشیو درخواست دسترسی\",\"Link\":\"/AccessibilityRequests\",\"Icon\":null,\"Items\":null},{\"Id\":\"li-systems\",\"Text\":\"سامانه ها\",\"Link\":\"/Systems\",\"Icon\":null,\"Items\":null},{\"Id\":\"li-aclFilesUpload\",\"Text\":\"بارگذاری فایل\",\"Link\":\"/AclFilesUploads\",\"Icon\":null,\"Items\":null},{\"Id\":\"li-policy\",\"Text\":\"قوانین\",\"Link\":\"/Policies\",\"Icon\":null,\"Items\":null},{\"Id\":\"li-report\",\"Text\":\"گزارشات\",\"Link\":null,\"Icon\":\"flaticon-list-3\",\"Items\":[{\"Id\":\"li-reportByFilter\",\"Text\":\"گزارش بر اساس پارامتر\",\"Link\":\"/Reports/ReportByFilter\",\"Icon\":null,\"Items\":null},{\"Id\":\"li-invalidFilesItem\",\"Text\":\"گزارش استثنایات\",\"Link\":\"/InvalidFileItems\",\"Icon\":null,\"Items\":null},{\"Id\":\"li-reportByCount\",\"Text\":\"گزارش دسترسی بر اساس تعداد\",\"Link\":\"/Reports/ReportByCount\",\"Icon\":null,\"Items\":null}]},{\"Id\":\"li-networkDiagram\",\"Text\":\"گراف دسترسی\",\"Link\":\"/NetworkDiagrams\",\"Icon\":null,\"Items\":null},{\"Id\":\"li-transaction\",\"Text\":\"تراکنش ها\",\"Link\":null,\"Icon\":\"flaticon-list-3\",\"Items\":[{\"Id\":\"li-excelFormat\",\"Text\":\"تعریف فرمت اکسل\",\"Link\":\"/ExcelFormats\",\"Icon\":null,\"Items\":null},{\"Id\":\"li-transactionList\",\"Text\":\"بارگذاری فایل تراکنش\",\"Link\":\"/Transactions\",\"Icon\":null,\"Items\":null},{\"Id\":\"li-transactionReport\",\"Text\":\"گزارش تراکنش ها\",\"Link\":\"/Transactions/TransactionDetailReport\",\"Icon\":null,\"Items\":null},{\"Id\":\"li-searchLog\",\"Text\":\"جستجو در تراکنش ها\",\"Link\":\"/SearchLogs/SearchLog\",\"Icon\":null,\"Items\":null},{\"Id\":\"li-abundanceReport \",\"Text\":\"گزارش فراوانی\",\"Link\":\"/SearchLogs/AbundanceReport\",\"Icon\":null,\"Items\":null},{\"Id\":\"li-sajayaReport \",\"Text\":\"گزارش سجایا\",\"Link\":\"/SearchLogs/SajayaReport\",\"Icon\":null,\"Items\":null}]},{\"Id\":\"li-transaction\",\"Text\":\"Topup تراکنش های حساب\",\"Link\":null,\"Icon\":\"flaticon-list-3\",\"Items\":[{\"Id\":\"li-excelFormat\",\"Text\":\"تعریف فرمت اکسل\",\"Link\":\"/TopupAccountExcelFormats\",\"Icon\":null,\"Items\":null},{\"Id\":\"li-transactionList\",\"Text\":\"بارگذاری فایل تراکنش\",\"Link\":\"/TopupAccountTransactions\",\"Icon\":null,\"Items\":null},{\"Id\":\"li-transactionReport\",\"Text\":\"گزارش تراکنش ها\",\"Link\":\"/TopupAccountTransactions/TransactionDetailReport\",\"Icon\":null,\"Items\":null}]},{\"Id\":\"li-transaction\",\"Text\":\"Topup تراکنش های کانال\",\"Link\":null,\"Icon\":\"flaticon-list-3\",\"Items\":[{\"Id\":\"li-excelFormat\",\"Text\":\"تعریف فرمت اکسل\",\"Link\":\"/TopupChannelExcelFormats\",\"Icon\":null,\"Items\":null},{\"Id\":\"li-transactionList\",\"Text\":\"بارگذاری فایل تراکنش\",\"Link\":\"/TopupChannelTransactions\",\"Icon\":null,\"Items\":null},{\"Id\":\"li-transactionReport\",\"Text\":\"گزارش تراکنش ها\",\"Link\":\"/TopupChannelTransactions/TransactionDetailReport\",\"Icon\":null,\"Items\":null}]},{\"Id\":\"li-base\",\"Text\":\"اطلاعات پایه\",\"Link\":null,\"Icon\":\"flaticon-list-3\",\"Items\":[{\"Id\":\"li-accessType\",\"Text\":\"نوع دسترسی\",\"Link\":\"/AccessTypes\",\"Icon\":null,\"Items\":null},{\"Id\":\"li-addressType\",\"Text\":\"نوع آدرس\",\"Link\":\"/AddressTypes\",\"Icon\":null,\"Items\":null},{\"Id\":\"li-department\",\"Text\":\"دپارتمان\",\"Link\":\"/Departments\",\"Icon\":null,\"Items\":null},{\"Id\":\"li-protocol\",\"Text\":\"پروتکل\",\"Link\":\"/Protocols\",\"Icon\":null,\"Items\":null},{\"Id\":\"li-service\",\"Text\":\"پورت(سرویس)\",\"Link\":\"/Services\",\"Icon\":null,\"Items\":null},{\"Id\":\"li-serviceGroup\",\"Text\":\"گروه سرویس\",\"Link\":\"/ServiceGroups\",\"Icon\":null,\"Items\":null},{\"Id\":\"li-actionType\",\"Text\":\"عملیات\",\"Link\":\"/ActionTypes\",\"Icon\":null,\"Items\":null},{\"Id\":\"li-router\",\"Text\":\"روتر\",\"Link\":\"/Routers\",\"Icon\":null,\"Items\":null},{\"Id\":\"li-accessRange\",\"Text\":\"محدوده دسترسی\",\"Link\":\"/AccessRanges\",\"Icon\":null,\"Items\":null},{\"Id\":\"li-authorities\",\"Text\":\"اختیار\",\"Link\":\"/Authorities\",\"Icon\":null,\"Items\":null},{\"Id\":\"li-dutyPositions\",\"Text\":\"محل خدمت\",\"Link\":\"/DutyPositions\",\"Icon\":null,\"Items\":null}]},{\"Id\":\"li-account\",\"Text\":\"ناحیه کاربری\",\"Link\":null,\"Icon\":\"flaticon-list-3\",\"Items\":[{\"Id\":\"li-users\",\"Text\":\"کاربران\",\"Link\":\"/UserManagement\",\"Icon\":null,\"Items\":null},{\"Id\":\"li-roles\",\"Text\":\"نقش\",\"Link\":\"/AccessRights\",\"Icon\":null,\"Items\":null},{\"Id\":\"li-position\",\"Text\":\"پست سازمانی\",\"Link\":\"/Positions\",\"Icon\":null,\"Items\":null},{\"Id\":\"li-changePassword\",\"Text\":\"تغییر کلمه عبور\",\"Link\":\"/UserManagement/ChangePassword\",\"Icon\":null,\"Items\":null}]}]"
                        },
                        new
                        {
                            Id = 4,
                            ConcurrencyStamp = "fdf378ee-ff1d-4594-a5f3-27ae72e25a28",
                            Name = "اداره پشتیبانی",
                            NormalizedName = "اداره پشتیبانی",
                            PanelMenu = "[{\"Id\":\"li-accessibility\",\"Text\":\"تعریف دسترسی\",\"Link\":\"/Accessibilities\",\"Icon\":null,\"Items\":null},{\"Id\":\"li-accessibilityRequest\",\"Text\":\"آرشیو درخواست دسترسی\",\"Link\":\"/AccessibilityRequests\",\"Icon\":null,\"Items\":null},{\"Id\":\"li-systems\",\"Text\":\"سامانه ها\",\"Link\":\"/Systems\",\"Icon\":null,\"Items\":null},{\"Id\":\"li-aclFilesUpload\",\"Text\":\"بارگذاری فایل\",\"Link\":\"/AclFilesUploads\",\"Icon\":null,\"Items\":null},{\"Id\":\"li-policy\",\"Text\":\"قوانین\",\"Link\":\"/Policies\",\"Icon\":null,\"Items\":null},{\"Id\":\"li-report\",\"Text\":\"گزارشات\",\"Link\":null,\"Icon\":\"flaticon-list-3\",\"Items\":[{\"Id\":\"li-reportByFilter\",\"Text\":\"گزارش بر اساس پارامتر\",\"Link\":\"/Reports/ReportByFilter\",\"Icon\":null,\"Items\":null},{\"Id\":\"li-invalidFilesItem\",\"Text\":\"گزارش استثنایات\",\"Link\":\"/InvalidFileItems\",\"Icon\":null,\"Items\":null},{\"Id\":\"li-reportByCount\",\"Text\":\"گزارش دسترسی بر اساس تعداد\",\"Link\":\"/Reports/ReportByCount\",\"Icon\":null,\"Items\":null}]},{\"Id\":\"li-networkDiagram\",\"Text\":\"گراف دسترسی\",\"Link\":\"/NetworkDiagrams\",\"Icon\":null,\"Items\":null},{\"Id\":\"li-transaction\",\"Text\":\"تراکنش ها\",\"Link\":null,\"Icon\":\"flaticon-list-3\",\"Items\":[{\"Id\":\"li-excelFormat\",\"Text\":\"تعریف فرمت اکسل\",\"Link\":\"/ExcelFormats\",\"Icon\":null,\"Items\":null},{\"Id\":\"li-transactionList\",\"Text\":\"بارگذاری فایل تراکنش\",\"Link\":\"/Transactions\",\"Icon\":null,\"Items\":null},{\"Id\":\"li-transactionReport\",\"Text\":\"گزارش تراکنش ها\",\"Link\":\"/Transactions/TransactionDetailReport\",\"Icon\":null,\"Items\":null},{\"Id\":\"li-searchLog\",\"Text\":\"جستجو در تراکنش ها\",\"Link\":\"/SearchLogs/SearchLog\",\"Icon\":null,\"Items\":null},{\"Id\":\"li-abundanceReport \",\"Text\":\"گزارش فراوانی\",\"Link\":\"/SearchLogs/AbundanceReport\",\"Icon\":null,\"Items\":null},{\"Id\":\"li-sajayaReport \",\"Text\":\"گزارش سجایا\",\"Link\":\"/SearchLogs/SajayaReport\",\"Icon\":null,\"Items\":null}]},{\"Id\":\"li-transaction\",\"Text\":\"Topup تراکنش های حساب\",\"Link\":null,\"Icon\":\"flaticon-list-3\",\"Items\":[{\"Id\":\"li-excelFormat\",\"Text\":\"تعریف فرمت اکسل\",\"Link\":\"/TopupAccountExcelFormats\",\"Icon\":null,\"Items\":null},{\"Id\":\"li-transactionList\",\"Text\":\"بارگذاری فایل تراکنش\",\"Link\":\"/TopupAccountTransactions\",\"Icon\":null,\"Items\":null},{\"Id\":\"li-transactionReport\",\"Text\":\"گزارش تراکنش ها\",\"Link\":\"/TopupAccountTransactions/TransactionDetailReport\",\"Icon\":null,\"Items\":null}]},{\"Id\":\"li-transaction\",\"Text\":\"Topup تراکنش های کانال\",\"Link\":null,\"Icon\":\"flaticon-list-3\",\"Items\":[{\"Id\":\"li-excelFormat\",\"Text\":\"تعریف فرمت اکسل\",\"Link\":\"/TopupChannelExcelFormats\",\"Icon\":null,\"Items\":null},{\"Id\":\"li-transactionList\",\"Text\":\"بارگذاری فایل تراکنش\",\"Link\":\"/TopupChannelTransactions\",\"Icon\":null,\"Items\":null},{\"Id\":\"li-transactionReport\",\"Text\":\"گزارش تراکنش ها\",\"Link\":\"/TopupChannelTransactions/TransactionDetailReport\",\"Icon\":null,\"Items\":null}]},{\"Id\":\"li-base\",\"Text\":\"اطلاعات پایه\",\"Link\":null,\"Icon\":\"flaticon-list-3\",\"Items\":[{\"Id\":\"li-accessType\",\"Text\":\"نوع دسترسی\",\"Link\":\"/AccessTypes\",\"Icon\":null,\"Items\":null},{\"Id\":\"li-addressType\",\"Text\":\"نوع آدرس\",\"Link\":\"/AddressTypes\",\"Icon\":null,\"Items\":null},{\"Id\":\"li-department\",\"Text\":\"دپارتمان\",\"Link\":\"/Departments\",\"Icon\":null,\"Items\":null},{\"Id\":\"li-protocol\",\"Text\":\"پروتکل\",\"Link\":\"/Protocols\",\"Icon\":null,\"Items\":null},{\"Id\":\"li-service\",\"Text\":\"پورت(سرویس)\",\"Link\":\"/Services\",\"Icon\":null,\"Items\":null},{\"Id\":\"li-serviceGroup\",\"Text\":\"گروه سرویس\",\"Link\":\"/ServiceGroups\",\"Icon\":null,\"Items\":null},{\"Id\":\"li-actionType\",\"Text\":\"عملیات\",\"Link\":\"/ActionTypes\",\"Icon\":null,\"Items\":null},{\"Id\":\"li-router\",\"Text\":\"روتر\",\"Link\":\"/Routers\",\"Icon\":null,\"Items\":null},{\"Id\":\"li-accessRange\",\"Text\":\"محدوده دسترسی\",\"Link\":\"/AccessRanges\",\"Icon\":null,\"Items\":null},{\"Id\":\"li-authorities\",\"Text\":\"اختیار\",\"Link\":\"/Authorities\",\"Icon\":null,\"Items\":null},{\"Id\":\"li-dutyPositions\",\"Text\":\"محل خدمت\",\"Link\":\"/DutyPositions\",\"Icon\":null,\"Items\":null}]},{\"Id\":\"li-account\",\"Text\":\"ناحیه کاربری\",\"Link\":null,\"Icon\":\"flaticon-list-3\",\"Items\":[{\"Id\":\"li-users\",\"Text\":\"کاربران\",\"Link\":\"/UserManagement\",\"Icon\":null,\"Items\":null},{\"Id\":\"li-roles\",\"Text\":\"نقش\",\"Link\":\"/AccessRights\",\"Icon\":null,\"Items\":null},{\"Id\":\"li-position\",\"Text\":\"پست سازمانی\",\"Link\":\"/Positions\",\"Icon\":null,\"Items\":null},{\"Id\":\"li-changePassword\",\"Text\":\"تغییر کلمه عبور\",\"Link\":\"/UserManagement/ChangePassword\",\"Icon\":null,\"Items\":null}]}]"
                        },
                        new
                        {
                            Id = 5,
                            ConcurrencyStamp = "cf1a3d91-b47f-45f4-be10-1c8d4fc6af0b",
                            Name = "امور شعب",
                            NormalizedName = "امور شعب",
                            PanelMenu = "[{\"Id\":\"li-accessibility\",\"Text\":\"تعریف دسترسی\",\"Link\":\"/Accessibilities\",\"Icon\":null,\"Items\":null},{\"Id\":\"li-accessibilityRequest\",\"Text\":\"آرشیو درخواست دسترسی\",\"Link\":\"/AccessibilityRequests\",\"Icon\":null,\"Items\":null},{\"Id\":\"li-systems\",\"Text\":\"سامانه ها\",\"Link\":\"/Systems\",\"Icon\":null,\"Items\":null},{\"Id\":\"li-aclFilesUpload\",\"Text\":\"بارگذاری فایل\",\"Link\":\"/AclFilesUploads\",\"Icon\":null,\"Items\":null},{\"Id\":\"li-policy\",\"Text\":\"قوانین\",\"Link\":\"/Policies\",\"Icon\":null,\"Items\":null},{\"Id\":\"li-report\",\"Text\":\"گزارشات\",\"Link\":null,\"Icon\":\"flaticon-list-3\",\"Items\":[{\"Id\":\"li-reportByFilter\",\"Text\":\"گزارش بر اساس پارامتر\",\"Link\":\"/Reports/ReportByFilter\",\"Icon\":null,\"Items\":null},{\"Id\":\"li-invalidFilesItem\",\"Text\":\"گزارش استثنایات\",\"Link\":\"/InvalidFileItems\",\"Icon\":null,\"Items\":null},{\"Id\":\"li-reportByCount\",\"Text\":\"گزارش دسترسی بر اساس تعداد\",\"Link\":\"/Reports/ReportByCount\",\"Icon\":null,\"Items\":null}]},{\"Id\":\"li-networkDiagram\",\"Text\":\"گراف دسترسی\",\"Link\":\"/NetworkDiagrams\",\"Icon\":null,\"Items\":null},{\"Id\":\"li-transaction\",\"Text\":\"تراکنش ها\",\"Link\":null,\"Icon\":\"flaticon-list-3\",\"Items\":[{\"Id\":\"li-excelFormat\",\"Text\":\"تعریف فرمت اکسل\",\"Link\":\"/ExcelFormats\",\"Icon\":null,\"Items\":null},{\"Id\":\"li-transactionList\",\"Text\":\"بارگذاری فایل تراکنش\",\"Link\":\"/Transactions\",\"Icon\":null,\"Items\":null},{\"Id\":\"li-transactionReport\",\"Text\":\"گزارش تراکنش ها\",\"Link\":\"/Transactions/TransactionDetailReport\",\"Icon\":null,\"Items\":null},{\"Id\":\"li-searchLog\",\"Text\":\"جستجو در تراکنش ها\",\"Link\":\"/SearchLogs/SearchLog\",\"Icon\":null,\"Items\":null},{\"Id\":\"li-abundanceReport \",\"Text\":\"گزارش فراوانی\",\"Link\":\"/SearchLogs/AbundanceReport\",\"Icon\":null,\"Items\":null},{\"Id\":\"li-sajayaReport \",\"Text\":\"گزارش سجایا\",\"Link\":\"/SearchLogs/SajayaReport\",\"Icon\":null,\"Items\":null}]},{\"Id\":\"li-transaction\",\"Text\":\"Topup تراکنش های حساب\",\"Link\":null,\"Icon\":\"flaticon-list-3\",\"Items\":[{\"Id\":\"li-excelFormat\",\"Text\":\"تعریف فرمت اکسل\",\"Link\":\"/TopupAccountExcelFormats\",\"Icon\":null,\"Items\":null},{\"Id\":\"li-transactionList\",\"Text\":\"بارگذاری فایل تراکنش\",\"Link\":\"/TopupAccountTransactions\",\"Icon\":null,\"Items\":null},{\"Id\":\"li-transactionReport\",\"Text\":\"گزارش تراکنش ها\",\"Link\":\"/TopupAccountTransactions/TransactionDetailReport\",\"Icon\":null,\"Items\":null}]},{\"Id\":\"li-transaction\",\"Text\":\"Topup تراکنش های کانال\",\"Link\":null,\"Icon\":\"flaticon-list-3\",\"Items\":[{\"Id\":\"li-excelFormat\",\"Text\":\"تعریف فرمت اکسل\",\"Link\":\"/TopupChannelExcelFormats\",\"Icon\":null,\"Items\":null},{\"Id\":\"li-transactionList\",\"Text\":\"بارگذاری فایل تراکنش\",\"Link\":\"/TopupChannelTransactions\",\"Icon\":null,\"Items\":null},{\"Id\":\"li-transactionReport\",\"Text\":\"گزارش تراکنش ها\",\"Link\":\"/TopupChannelTransactions/TransactionDetailReport\",\"Icon\":null,\"Items\":null}]},{\"Id\":\"li-base\",\"Text\":\"اطلاعات پایه\",\"Link\":null,\"Icon\":\"flaticon-list-3\",\"Items\":[{\"Id\":\"li-accessType\",\"Text\":\"نوع دسترسی\",\"Link\":\"/AccessTypes\",\"Icon\":null,\"Items\":null},{\"Id\":\"li-addressType\",\"Text\":\"نوع آدرس\",\"Link\":\"/AddressTypes\",\"Icon\":null,\"Items\":null},{\"Id\":\"li-department\",\"Text\":\"دپارتمان\",\"Link\":\"/Departments\",\"Icon\":null,\"Items\":null},{\"Id\":\"li-protocol\",\"Text\":\"پروتکل\",\"Link\":\"/Protocols\",\"Icon\":null,\"Items\":null},{\"Id\":\"li-service\",\"Text\":\"پورت(سرویس)\",\"Link\":\"/Services\",\"Icon\":null,\"Items\":null},{\"Id\":\"li-serviceGroup\",\"Text\":\"گروه سرویس\",\"Link\":\"/ServiceGroups\",\"Icon\":null,\"Items\":null},{\"Id\":\"li-actionType\",\"Text\":\"عملیات\",\"Link\":\"/ActionTypes\",\"Icon\":null,\"Items\":null},{\"Id\":\"li-router\",\"Text\":\"روتر\",\"Link\":\"/Routers\",\"Icon\":null,\"Items\":null},{\"Id\":\"li-accessRange\",\"Text\":\"محدوده دسترسی\",\"Link\":\"/AccessRanges\",\"Icon\":null,\"Items\":null},{\"Id\":\"li-authorities\",\"Text\":\"اختیار\",\"Link\":\"/Authorities\",\"Icon\":null,\"Items\":null},{\"Id\":\"li-dutyPositions\",\"Text\":\"محل خدمت\",\"Link\":\"/DutyPositions\",\"Icon\":null,\"Items\":null}]},{\"Id\":\"li-account\",\"Text\":\"ناحیه کاربری\",\"Link\":null,\"Icon\":\"flaticon-list-3\",\"Items\":[{\"Id\":\"li-users\",\"Text\":\"کاربران\",\"Link\":\"/UserManagement\",\"Icon\":null,\"Items\":null},{\"Id\":\"li-roles\",\"Text\":\"نقش\",\"Link\":\"/AccessRights\",\"Icon\":null,\"Items\":null},{\"Id\":\"li-position\",\"Text\":\"پست سازمانی\",\"Link\":\"/Positions\",\"Icon\":null,\"Items\":null},{\"Id\":\"li-changePassword\",\"Text\":\"تغییر کلمه عبور\",\"Link\":\"/UserManagement/ChangePassword\",\"Icon\":null,\"Items\":null}]}]"
                        },
                        new
                        {
                            Id = 6,
                            ConcurrencyStamp = "4aa334bb-5c36-4b69-a74b-3f0d826538b7",
                            Name = "کاربر گزارش",
                            NormalizedName = "کاربر گزارش",
                            PanelMenu = "[{\"Id\":\"li-accessibility\",\"Text\":\"تعریف دسترسی\",\"Link\":\"/Accessibilities\",\"Icon\":null,\"Items\":null},{\"Id\":\"li-accessibilityRequest\",\"Text\":\"آرشیو درخواست دسترسی\",\"Link\":\"/AccessibilityRequests\",\"Icon\":null,\"Items\":null},{\"Id\":\"li-systems\",\"Text\":\"سامانه ها\",\"Link\":\"/Systems\",\"Icon\":null,\"Items\":null},{\"Id\":\"li-aclFilesUpload\",\"Text\":\"بارگذاری فایل\",\"Link\":\"/AclFilesUploads\",\"Icon\":null,\"Items\":null},{\"Id\":\"li-policy\",\"Text\":\"قوانین\",\"Link\":\"/Policies\",\"Icon\":null,\"Items\":null},{\"Id\":\"li-report\",\"Text\":\"گزارشات\",\"Link\":null,\"Icon\":\"flaticon-list-3\",\"Items\":[{\"Id\":\"li-reportByFilter\",\"Text\":\"گزارش بر اساس پارامتر\",\"Link\":\"/Reports/ReportByFilter\",\"Icon\":null,\"Items\":null},{\"Id\":\"li-invalidFilesItem\",\"Text\":\"گزارش استثنایات\",\"Link\":\"/InvalidFileItems\",\"Icon\":null,\"Items\":null},{\"Id\":\"li-reportByCount\",\"Text\":\"گزارش دسترسی بر اساس تعداد\",\"Link\":\"/Reports/ReportByCount\",\"Icon\":null,\"Items\":null}]},{\"Id\":\"li-networkDiagram\",\"Text\":\"گراف دسترسی\",\"Link\":\"/NetworkDiagrams\",\"Icon\":null,\"Items\":null},{\"Id\":\"li-transaction\",\"Text\":\"تراکنش ها\",\"Link\":null,\"Icon\":\"flaticon-list-3\",\"Items\":[{\"Id\":\"li-excelFormat\",\"Text\":\"تعریف فرمت اکسل\",\"Link\":\"/ExcelFormats\",\"Icon\":null,\"Items\":null},{\"Id\":\"li-transactionList\",\"Text\":\"بارگذاری فایل تراکنش\",\"Link\":\"/Transactions\",\"Icon\":null,\"Items\":null},{\"Id\":\"li-transactionReport\",\"Text\":\"گزارش تراکنش ها\",\"Link\":\"/Transactions/TransactionDetailReport\",\"Icon\":null,\"Items\":null},{\"Id\":\"li-searchLog\",\"Text\":\"جستجو در تراکنش ها\",\"Link\":\"/SearchLogs/SearchLog\",\"Icon\":null,\"Items\":null},{\"Id\":\"li-abundanceReport \",\"Text\":\"گزارش فراوانی\",\"Link\":\"/SearchLogs/AbundanceReport\",\"Icon\":null,\"Items\":null},{\"Id\":\"li-sajayaReport \",\"Text\":\"گزارش سجایا\",\"Link\":\"/SearchLogs/SajayaReport\",\"Icon\":null,\"Items\":null}]},{\"Id\":\"li-transaction\",\"Text\":\"Topup تراکنش های حساب\",\"Link\":null,\"Icon\":\"flaticon-list-3\",\"Items\":[{\"Id\":\"li-excelFormat\",\"Text\":\"تعریف فرمت اکسل\",\"Link\":\"/TopupAccountExcelFormats\",\"Icon\":null,\"Items\":null},{\"Id\":\"li-transactionList\",\"Text\":\"بارگذاری فایل تراکنش\",\"Link\":\"/TopupAccountTransactions\",\"Icon\":null,\"Items\":null},{\"Id\":\"li-transactionReport\",\"Text\":\"گزارش تراکنش ها\",\"Link\":\"/TopupAccountTransactions/TransactionDetailReport\",\"Icon\":null,\"Items\":null}]},{\"Id\":\"li-transaction\",\"Text\":\"Topup تراکنش های کانال\",\"Link\":null,\"Icon\":\"flaticon-list-3\",\"Items\":[{\"Id\":\"li-excelFormat\",\"Text\":\"تعریف فرمت اکسل\",\"Link\":\"/TopupChannelExcelFormats\",\"Icon\":null,\"Items\":null},{\"Id\":\"li-transactionList\",\"Text\":\"بارگذاری فایل تراکنش\",\"Link\":\"/TopupChannelTransactions\",\"Icon\":null,\"Items\":null},{\"Id\":\"li-transactionReport\",\"Text\":\"گزارش تراکنش ها\",\"Link\":\"/TopupChannelTransactions/TransactionDetailReport\",\"Icon\":null,\"Items\":null}]},{\"Id\":\"li-base\",\"Text\":\"اطلاعات پایه\",\"Link\":null,\"Icon\":\"flaticon-list-3\",\"Items\":[{\"Id\":\"li-accessType\",\"Text\":\"نوع دسترسی\",\"Link\":\"/AccessTypes\",\"Icon\":null,\"Items\":null},{\"Id\":\"li-addressType\",\"Text\":\"نوع آدرس\",\"Link\":\"/AddressTypes\",\"Icon\":null,\"Items\":null},{\"Id\":\"li-department\",\"Text\":\"دپارتمان\",\"Link\":\"/Departments\",\"Icon\":null,\"Items\":null},{\"Id\":\"li-protocol\",\"Text\":\"پروتکل\",\"Link\":\"/Protocols\",\"Icon\":null,\"Items\":null},{\"Id\":\"li-service\",\"Text\":\"پورت(سرویس)\",\"Link\":\"/Services\",\"Icon\":null,\"Items\":null},{\"Id\":\"li-serviceGroup\",\"Text\":\"گروه سرویس\",\"Link\":\"/ServiceGroups\",\"Icon\":null,\"Items\":null},{\"Id\":\"li-actionType\",\"Text\":\"عملیات\",\"Link\":\"/ActionTypes\",\"Icon\":null,\"Items\":null},{\"Id\":\"li-router\",\"Text\":\"روتر\",\"Link\":\"/Routers\",\"Icon\":null,\"Items\":null},{\"Id\":\"li-accessRange\",\"Text\":\"محدوده دسترسی\",\"Link\":\"/AccessRanges\",\"Icon\":null,\"Items\":null},{\"Id\":\"li-authorities\",\"Text\":\"اختیار\",\"Link\":\"/Authorities\",\"Icon\":null,\"Items\":null},{\"Id\":\"li-dutyPositions\",\"Text\":\"محل خدمت\",\"Link\":\"/DutyPositions\",\"Icon\":null,\"Items\":null}]},{\"Id\":\"li-account\",\"Text\":\"ناحیه کاربری\",\"Link\":null,\"Icon\":\"flaticon-list-3\",\"Items\":[{\"Id\":\"li-users\",\"Text\":\"کاربران\",\"Link\":\"/UserManagement\",\"Icon\":null,\"Items\":null},{\"Id\":\"li-roles\",\"Text\":\"نقش\",\"Link\":\"/AccessRights\",\"Icon\":null,\"Items\":null},{\"Id\":\"li-position\",\"Text\":\"پست سازمانی\",\"Link\":\"/Positions\",\"Icon\":null,\"Items\":null},{\"Id\":\"li-changePassword\",\"Text\":\"تغییر کلمه عبور\",\"Link\":\"/UserManagement/ChangePassword\",\"Icon\":null,\"Items\":null}]}]"
                        });
                });

            modelBuilder.Entity("DomainEntities.ApplicationUserAggregate.ApplicationRoleAuthority", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ApplicationRoleId");

                    b.Property<int>("AuthorityId");

                    b.Property<bool>("RecordStatus");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationRoleId");

                    b.HasIndex("AuthorityId");

                    b.ToTable("ApplicationRoleAuthorities");
                });

            modelBuilder.Entity("DomainEntities.ApplicationUserAggregate.ApplicationUser", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AccessFailedCount");

                    b.Property<int?>("BankBranchId");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<int?>("DepartmentId");

                    b.Property<int?>("DutyPositionId");

                    b.Property<string>("Email")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed");

                    b.Property<bool>("ExpertPerformance");

                    b.Property<string>("ExpertPerformanceToken")
                        .HasMaxLength(100)
                        .IsUnicode(true);

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(150)
                        .IsUnicode(true);

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(150)
                        .IsUnicode(true);

                    b.Property<bool>("LockoutEnabled");

                    b.Property<DateTimeOffset?>("LockoutEnd");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash");

                    b.Property<string>("PersonnelCode")
                        .HasMaxLength(10);

                    b.Property<string>("PhoneNumber");

                    b.Property<bool>("PhoneNumberConfirmed");

                    b.Property<string>("Picture")
                        .HasMaxLength(150)
                        .IsUnicode(true);

                    b.Property<int?>("PositionId");

                    b.Property<bool>("Qualifications");

                    b.Property<string>("QualificationsToken")
                        .HasMaxLength(100)
                        .IsUnicode(true);

                    b.Property<DateTime>("RegDateTime");

                    b.Property<string>("SecurityStamp");

                    b.Property<bool>("TwoFactorEnabled");

                    b.Property<string>("UserName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("BankBranchId");

                    b.HasIndex("DepartmentId");

                    b.HasIndex("DutyPositionId");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.HasIndex("PositionId");

                    b.ToTable("ApplicationUserItems");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "a0c979d1-f65e-4122-b62f-78b5b8df30da",
                            Email = "info@test.com",
                            EmailConfirmed = false,
                            ExpertPerformance = false,
                            FirstName = "مدیر",
                            LastName = "سایت",
                            LockoutEnabled = true,
                            NormalizedEmail = "INFO@TEST.COM",
                            NormalizedUserName = "ADMIN",
                            PasswordHash = "AQAAAAEAACcQAAAAEFQSCRc6wVL8pu5ChTDI4xT2A5LQ2okSnHseUkzOj0SfLwNzOdHLlhSHaf+lR3jv9A==",
                            PhoneNumberConfirmed = false,
                            Qualifications = false,
                            RegDateTime = new DateTime(2021, 6, 21, 16, 46, 54, 833, DateTimeKind.Local).AddTicks(5229),
                            SecurityStamp = "68bccbf3-564b-4f50-b58e-def000a99746",
                            TwoFactorEnabled = false,
                            UserName = "admin"
                        });
                });

            modelBuilder.Entity("DomainEntities.ApplicationUserAggregate.ApplicationUserAccessRageHeader", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AccessRangeHeaderId");

                    b.Property<int>("ApplicationUserId");

                    b.Property<bool>("RecordStatus");

                    b.HasKey("Id");

                    b.HasIndex("AccessRangeHeaderId");

                    b.HasIndex("ApplicationUserId");

                    b.ToTable("ApplicationUserAccessRageHeaders");
                });

            modelBuilder.Entity("DomainEntities.ApplicationUserAggregate.ApplicationUserActivity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ActionName")
                        .HasMaxLength(150);

                    b.Property<string>("ActivityTitle")
                        .HasMaxLength(200);

                    b.Property<string>("ControllerName")
                        .HasMaxLength(150);

                    b.Property<DateTime>("EntryDateTime");

                    b.Property<bool>("RecordStatus");

                    b.Property<int>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("ApplicationUser_ActivityLogs");
                });

            modelBuilder.Entity("DomainEntities.ApplicationUserAggregate.ApplicationUserRole", b =>
                {
                    b.Property<int>("UserId");

                    b.Property<int>("RoleId");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("ApplicationUser_UserRoles");

                    b.HasData(
                        new
                        {
                            UserId = 1,
                            RoleId = 2
                        });
                });

            modelBuilder.Entity("DomainEntities.ApplicationUserAggregate.OrganizationalChart", b =>
                {
                    b.Property<short>("Id");

                    b.Property<bool>("RecordStatus");

                    b.Property<string>("Title")
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.ToTable("ApplicationUser_OrganizationalCharts");

                    b.HasData(
                        new
                        {
                            Id = (short)1,
                            RecordStatus = false,
                            Title = "رئیس"
                        },
                        new
                        {
                            Id = (short)2,
                            RecordStatus = false,
                            Title = "معاون"
                        },
                        new
                        {
                            Id = (short)3,
                            RecordStatus = false,
                            Title = "کارشناس مسئول"
                        },
                        new
                        {
                            Id = (short)4,
                            RecordStatus = false,
                            Title = "کارشناس"
                        });
                });

            modelBuilder.Entity("DomainEntities.AuthorityAggregate.Authority", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .HasMaxLength(256)
                        .IsUnicode(true);

                    b.Property<bool>("RecordStatus");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(true);

                    b.HasKey("Id");

                    b.ToTable("Authorities");
                });

            modelBuilder.Entity("DomainEntities.BankBranchAggregate.BankBranch", b =>
                {
                    b.Property<int>("Id");

                    b.Property<int?>("BranchHeadId");

                    b.Property<bool>("RecordStatus");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(true);

                    b.HasKey("Id");

                    b.HasIndex("BranchHeadId");

                    b.ToTable("BankBranches");

                    b.HasData(
                        new
                        {
                            Id = 515,
                            RecordStatus = false,
                            Title = "اداره منطقه یک تهران"
                        },
                        new
                        {
                            Id = 516,
                            RecordStatus = false,
                            Title = "اداره منطقه دو تهران"
                        },
                        new
                        {
                            Id = 510,
                            RecordStatus = false,
                            Title = "اداره منطقه سه تهران"
                        },
                        new
                        {
                            Id = 107,
                            RecordStatus = false,
                            Title = "شعبه مستقل بلوار"
                        },
                        new
                        {
                            Id = 164,
                            RecordStatus = false,
                            Title = "صندوق توسعه ملی"
                        },
                        new
                        {
                            Id = 101,
                            RecordStatus = false,
                            Title = "شعبه مستقل مرکزی"
                        },
                        new
                        {
                            Id = 500,
                            RecordStatus = false,
                            Title = "اداره امور شعب خراسان رضوی"
                        },
                        new
                        {
                            Id = 503,
                            RecordStatus = false,
                            Title = "اداره امور شعب فارس"
                        },
                        new
                        {
                            Id = 504,
                            RecordStatus = false,
                            Title = "اداره امور شعب گیلان"
                        },
                        new
                        {
                            Id = 507,
                            RecordStatus = false,
                            Title = "اداره امور شعب مازندران"
                        },
                        new
                        {
                            Id = 509,
                            RecordStatus = false,
                            Title = "اداره امور شعب کرمان"
                        },
                        new
                        {
                            Id = 512,
                            RecordStatus = false,
                            Title = "اداره امور شعب سیستان و بلوچستان"
                        },
                        new
                        {
                            Id = 513,
                            RecordStatus = false,
                            Title = "اداره امور شعب یزد"
                        },
                        new
                        {
                            Id = 517,
                            RecordStatus = false,
                            Title = "اداره امور شعب سمنان"
                        },
                        new
                        {
                            Id = 519,
                            RecordStatus = false,
                            Title = "اداره امور شعب گلستان"
                        },
                        new
                        {
                            Id = 524,
                            RecordStatus = false,
                            Title = "اداره امور شعب هرمزگان"
                        },
                        new
                        {
                            Id = 528,
                            RecordStatus = false,
                            Title = "اداره امور شعب چهارمحال بختیاری"
                        },
                        new
                        {
                            Id = 529,
                            RecordStatus = false,
                            Title = "اداره امور شعب کهگلویه و بویراحمد"
                        },
                        new
                        {
                            Id = 622,
                            RecordStatus = false,
                            Title = "اداره امور شعب خراسان شمالی"
                        },
                        new
                        {
                            Id = 624,
                            RecordStatus = false,
                            Title = "اداره امور شعب جنوبی"
                        },
                        new
                        {
                            Id = 642,
                            RecordStatus = false,
                            Title = "اداره امور شعب بوشهر"
                        },
                        new
                        {
                            Id = 501,
                            RecordStatus = false,
                            Title = "اداره امور شعب آذربایجان شرقی"
                        },
                        new
                        {
                            Id = 502,
                            RecordStatus = false,
                            Title = "اداره امور شعب اصفهان"
                        },
                        new
                        {
                            Id = 505,
                            RecordStatus = false,
                            Title = "اداره امور شعب کرمانشاه"
                        },
                        new
                        {
                            Id = 506,
                            RecordStatus = false,
                            Title = "اداره امور شعب خوزستان"
                        },
                        new
                        {
                            Id = 508,
                            RecordStatus = false,
                            Title = "اداره امور شعب مرکزی"
                        },
                        new
                        {
                            Id = 514,
                            RecordStatus = false,
                            Title = "اداره امور شعب آذربایجان غربی"
                        },
                        new
                        {
                            Id = 518,
                            RecordStatus = false,
                            Title = "اداره امور شعب اردبیل"
                        },
                        new
                        {
                            Id = 520,
                            RecordStatus = false,
                            Title = "اداره امور شعب قزوین"
                        },
                        new
                        {
                            Id = 521,
                            RecordStatus = false,
                            Title = "اداره امور شعب کردستان"
                        },
                        new
                        {
                            Id = 522,
                            RecordStatus = false,
                            Title = "اداره امور شعب همدان"
                        },
                        new
                        {
                            Id = 523,
                            RecordStatus = false,
                            Title = "اداره امور شعب لرستان"
                        },
                        new
                        {
                            Id = 525,
                            RecordStatus = false,
                            Title = "اداره امور شعب زنجان"
                        },
                        new
                        {
                            Id = 526,
                            RecordStatus = false,
                            Title = "اداره امور شعب البرز"
                        },
                        new
                        {
                            Id = 527,
                            RecordStatus = false,
                            Title = "اداره امور شعب قم"
                        },
                        new
                        {
                            Id = 750,
                            RecordStatus = false,
                            Title = "اداره امور شعب ایلام"
                        },
                        new
                        {
                            Id = 21,
                            RecordStatus = false,
                            Title = "اداره خزانه داری"
                        });
                });

            modelBuilder.Entity("DomainEntities.DepartmentAggregate.Department", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .HasMaxLength(50)
                        .IsUnicode(true);

                    b.Property<bool>("RecordStatus");

                    b.HasKey("Id");

                    b.ToTable("Departments");
                });

            modelBuilder.Entity("DomainEntities.DutyPositionAggregate.DutyPosition", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Code");

                    b.Property<bool>("RecordStatus");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(true);

                    b.HasKey("Id");

                    b.ToTable("DutyPositions");
                });

            modelBuilder.Entity("DomainEntities.ExcelFormatAggregate.ExcelFormatDetail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Column")
                        .HasMaxLength(50)
                        .IsUnicode(true);

                    b.Property<int>("HeaderId");

                    b.Property<string>("MappedColumn")
                        .HasMaxLength(50)
                        .IsUnicode(true);

                    b.Property<bool>("RecordStatus");

                    b.HasKey("Id");

                    b.HasIndex("HeaderId");

                    b.ToTable("ExcelFormatDetails");
                });

            modelBuilder.Entity("DomainEntities.ExcelFormatAggregate.ExcelFormatHeader", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ExcelHeaders")
                        .HasMaxLength(500)
                        .IsUnicode(true);

                    b.Property<byte>("FileFormat");

                    b.Property<bool>("RecordStatus");

                    b.Property<string>("Separator")
                        .HasMaxLength(5)
                        .IsUnicode(true);

                    b.Property<string>("Title")
                        .HasMaxLength(50)
                        .IsUnicode(true);

                    b.HasKey("Id");

                    b.ToTable("ExcelFormatHeaders");
                });

            modelBuilder.Entity("DomainEntities.InvalidFileItemAggregate.InvalidFileItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AclFilesUploadId");

                    b.Property<string>("InvalidItemTitle")
                        .IsRequired()
                        .IsUnicode(true);

                    b.Property<int>("LineNumber");

                    b.Property<bool>("RecordStatus");

                    b.HasKey("Id");

                    b.HasIndex("AclFilesUploadId");

                    b.ToTable("InvalidFileItems");
                });

            modelBuilder.Entity("DomainEntities.NotificationAggregate.Category", b =>
                {
                    b.Property<short>("Id");

                    b.Property<bool>("RecordStatus");

                    b.Property<string>("Title")
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.ToTable("Notification_Categories");

                    b.HasData(
                        new
                        {
                            Id = (short)1,
                            RecordStatus = false,
                            Title = "وظیفه ارسالی"
                        },
                        new
                        {
                            Id = (short)2,
                            RecordStatus = false,
                            Title = "تغییر وضعیت وظیفه"
                        },
                        new
                        {
                            Id = (short)3,
                            RecordStatus = false,
                            Title = "موعد انجام وظیفه"
                        },
                        new
                        {
                            Id = (short)4,
                            RecordStatus = false,
                            Title = "موعد انجام تست"
                        });
                });

            modelBuilder.Entity("DomainEntities.NotificationAggregate.NotificationItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<short>("CategoryId");

                    b.Property<int>("CreatedByUserId");

                    b.Property<DateTime>("EntryDateTime");

                    b.Property<int>("ForUserId");

                    b.Property<bool>("IsRead");

                    b.Property<bool>("IsSent");

                    b.Property<bool>("RecordStatus");

                    b.Property<string>("Text")
                        .HasMaxLength(300);

                    b.Property<int?>("ToDoTaskId");

                    b.Property<string>("Url");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("CreatedByUserId");

                    b.HasIndex("ForUserId");

                    b.HasIndex("ToDoTaskId");

                    b.ToTable("NotificationItems");
                });

            modelBuilder.Entity("DomainEntities.PolicyAggregate.Policy", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .HasMaxLength(200)
                        .IsUnicode(true);

                    b.Property<int?>("ProtocolId");

                    b.Property<bool>("RecordStatus");

                    b.Property<string>("Title")
                        .HasMaxLength(50)
                        .IsUnicode(true);

                    b.HasKey("Id");

                    b.HasIndex("ProtocolId");

                    b.ToTable("Policies");
                });

            modelBuilder.Entity("DomainEntities.PositionAggregate.Position", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .HasMaxLength(50)
                        .IsUnicode(true);

                    b.Property<bool>("RecordStatus");

                    b.Property<string>("Title")
                        .HasMaxLength(50)
                        .IsUnicode(true);

                    b.HasKey("Id");

                    b.ToTable("Positions");
                });

            modelBuilder.Entity("DomainEntities.ProtocolAggregate.Protocol", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .HasMaxLength(200)
                        .IsUnicode(true);

                    b.Property<string>("Name")
                        .HasMaxLength(50)
                        .IsUnicode(true);

                    b.Property<bool>("RecordStatus");

                    b.HasKey("Id");

                    b.ToTable("Protocols");
                });

            modelBuilder.Entity("DomainEntities.ReportAggregate.Chart", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AccessRight");

                    b.Property<string>("ChartOptions");

                    b.Property<string>("ClassName");

                    b.Property<string>("Color");

                    b.Property<string>("Command");

                    b.Property<bool>("RecordStatus");

                    b.Property<string>("SeriesName");

                    b.Property<string>("Style");

                    b.Property<string>("Title")
                        .HasMaxLength(100);

                    b.Property<string>("Type");

                    b.HasKey("Id");

                    b.ToTable("Report_Charts");
                });

            modelBuilder.Entity("DomainEntities.ReportAggregate.ReportBox", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AccessRight")
                        .HasMaxLength(50);

                    b.Property<string>("BoxStatus")
                        .HasMaxLength(100);

                    b.Property<string>("Description")
                        .HasMaxLength(100);

                    b.Property<string>("Icon")
                        .HasMaxLength(50);

                    b.Property<string>("Key")
                        .HasMaxLength(50);

                    b.Property<string>("Link")
                        .HasMaxLength(150);

                    b.Property<bool>("RecordStatus");

                    b.Property<string>("SqlCommand")
                        .HasMaxLength(500);

                    b.Property<string>("Title")
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.ToTable("Report_Boxes");
                });

            modelBuilder.Entity("DomainEntities.RouterAggregate.Router", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AccessNo")
                        .HasMaxLength(50)
                        .IsUnicode(true);

                    b.Property<string>("Name")
                        .HasMaxLength(50)
                        .IsUnicode(true);

                    b.Property<bool>("RecordStatus");

                    b.HasKey("Id");

                    b.ToTable("Routers");
                });

            modelBuilder.Entity("DomainEntities.SearchLogAggregate.SearchLogDetail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Address")
                        .HasMaxLength(250)
                        .IsUnicode(true);

                    b.Property<string>("CardNumber")
                        .HasMaxLength(50)
                        .IsUnicode(true);

                    b.Property<string>("FatherName")
                        .HasMaxLength(50)
                        .IsUnicode(true);

                    b.Property<string>("FirstName")
                        .HasMaxLength(50)
                        .IsUnicode(true);

                    b.Property<bool>("IsSuccess");

                    b.Property<bool>("IsVictim");

                    b.Property<string>("LastName")
                        .HasMaxLength(50)
                        .IsUnicode(true);

                    b.Property<string>("LetterIdentifier");

                    b.Property<string>("NationalCode")
                        .HasMaxLength(10)
                        .IsUnicode(true);

                    b.Property<bool>("RecordStatus");

                    b.Property<DateTime>("SearchDate");

                    b.Property<string>("SearchTime")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(true);

                    b.Property<int>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("SearchLogDetails");
                });

            modelBuilder.Entity("DomainEntities.SearchLogAggregate.SearchLogTransactionDetail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("RecordStatus");

                    b.Property<int>("SearchLogDetailId");

                    b.Property<int?>("TopupAccountTransactionDetailId");

                    b.Property<int?>("TopupChannelTransactionDetailId");

                    b.Property<int>("TransactionDetailId");

                    b.HasKey("Id");

                    b.HasIndex("SearchLogDetailId");

                    b.HasIndex("TopupAccountTransactionDetailId");

                    b.HasIndex("TopupChannelTransactionDetailId");

                    b.HasIndex("TransactionDetailId");

                    b.ToTable("SearchLogTransactionDetail");
                });

            modelBuilder.Entity("DomainEntities.ServiceAggregate.Service", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(200)
                        .IsUnicode(true);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(true);

                    b.Property<int?>("Port");

                    b.Property<int?>("ProtocolId");

                    b.Property<bool>("RecordStatus");

                    b.Property<int?>("ServiceLevelId");

                    b.HasKey("Id");

                    b.HasIndex("ProtocolId");

                    b.HasIndex("ServiceLevelId");

                    b.ToTable("Services");
                });

            modelBuilder.Entity("DomainEntities.ServiceGroupAggregate.ServiceGroup", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .HasMaxLength(256)
                        .IsUnicode(true);

                    b.Property<string>("Name")
                        .HasMaxLength(50)
                        .IsUnicode(true);

                    b.Property<bool>("RecordStatus");

                    b.HasKey("Id");

                    b.ToTable("ServiceGroups");
                });

            modelBuilder.Entity("DomainEntities.ServiceLevelAggregate.ServiceLevel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("RecordStatus");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(true);

                    b.HasKey("Id");

                    b.ToTable("ServiceLevels");
                });

            modelBuilder.Entity("DomainEntities.SettingAggregate.Priority", b =>
                {
                    b.Property<short>("Id");

                    b.Property<bool>("RecordStatus");

                    b.Property<string>("Title")
                        .HasMaxLength(20)
                        .IsUnicode(true);

                    b.HasKey("Id");

                    b.ToTable("Common_Priorities");

                    b.HasData(
                        new
                        {
                            Id = (short)1,
                            RecordStatus = false,
                            Title = "ضروری"
                        },
                        new
                        {
                            Id = (short)2,
                            RecordStatus = false,
                            Title = "معمولی"
                        },
                        new
                        {
                            Id = (short)3,
                            RecordStatus = false,
                            Title = "پایین"
                        });
                });

            modelBuilder.Entity("DomainEntities.SettingAggregate.Setting", b =>
                {
                    b.Property<short>("Id");

                    b.Property<string>("EmailPassword")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<short?>("EmailPortNumber");

                    b.Property<string>("EmailSmtpServer")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<string>("EmailUsername")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<bool?>("EnableSsl");

                    b.Property<bool>("RecordStatus");

                    b.Property<string>("SmsPassword")
                        .HasMaxLength(100)
                        .IsUnicode(true);

                    b.Property<string>("SmsServiceNumber")
                        .HasMaxLength(50)
                        .IsUnicode(true);

                    b.Property<string>("SmsUserName");

                    b.Property<string>("ThanksMsg");

                    b.Property<string>("WebSiteTitle")
                        .HasMaxLength(100)
                        .IsUnicode(true);

                    b.Property<string>("WelcomeText");

                    b.HasKey("Id");

                    b.ToTable("Settings");

                    b.HasData(
                        new
                        {
                            Id = (short)1,
                            RecordStatus = false,
                            WebSiteTitle = "سامانه تست نفوذ"
                        });
                });

            modelBuilder.Entity("DomainEntities.SystemsAggregate.Systems", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("AccessibilityLevelId");

                    b.Property<int?>("DepartmentId");

                    b.Property<string>("Description")
                        .HasMaxLength(250)
                        .IsUnicode(true);

                    b.Property<string>("FirstName")
                        .HasMaxLength(50)
                        .IsUnicode(true);

                    b.Property<int?>("ImportanceFactor");

                    b.Property<int?>("InformationAccessibilityLevelId");

                    b.Property<string>("IpAddress")
                        .HasMaxLength(50)
                        .IsUnicode(true);

                    b.Property<string>("IpFrom");

                    b.Property<string>("IpTo");

                    b.Property<int>("KindId");

                    b.Property<string>("LastName")
                        .HasMaxLength(50)
                        .IsUnicode(true);

                    b.Property<int?>("PersonelCode");

                    b.Property<bool>("RecordStatus");

                    b.Property<string>("SystemName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(true);

                    b.HasKey("Id");

                    b.HasIndex("AccessibilityLevelId");

                    b.HasIndex("DepartmentId");

                    b.HasIndex("InformationAccessibilityLevelId");

                    b.ToTable("Systems");
                });

            modelBuilder.Entity("DomainEntities.TestOptionsAggregate.TestOptions", b =>
                {
                    b.Property<short>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("RecordStatus");

                    b.Property<short>("TableId");

                    b.Property<string>("Title")
                        .HasMaxLength(100)
                        .IsUnicode(true);

                    b.HasKey("Id");

                    b.ToTable("Common_TestOptions");

                    b.HasData(
                        new
                        {
                            Id = (short)1,
                            RecordStatus = false,
                            TableId = (short)1,
                            Title = "Not Applicable"
                        },
                        new
                        {
                            Id = (short)2,
                            RecordStatus = false,
                            TableId = (short)1,
                            Title = "Passes"
                        },
                        new
                        {
                            Id = (short)3,
                            RecordStatus = false,
                            TableId = (short)1,
                            Title = "Failed"
                        },
                        new
                        {
                            Id = (short)4,
                            RecordStatus = false,
                            TableId = (short)1,
                            Title = "Not Accessible"
                        },
                        new
                        {
                            Id = (short)5,
                            RecordStatus = false,
                            TableId = (short)2,
                            Title = "Local-Adjacent Network"
                        },
                        new
                        {
                            Id = (short)6,
                            RecordStatus = false,
                            TableId = (short)2,
                            Title = "Network"
                        },
                        new
                        {
                            Id = (short)7,
                            RecordStatus = false,
                            TableId = (short)3,
                            Title = "High"
                        },
                        new
                        {
                            Id = (short)8,
                            RecordStatus = false,
                            TableId = (short)3,
                            Title = "Medium"
                        },
                        new
                        {
                            Id = (short)9,
                            RecordStatus = false,
                            TableId = (short)3,
                            Title = "Low"
                        },
                        new
                        {
                            Id = (short)10,
                            RecordStatus = false,
                            TableId = (short)4,
                            Title = "Multiple"
                        },
                        new
                        {
                            Id = (short)11,
                            RecordStatus = false,
                            TableId = (short)4,
                            Title = "Single"
                        },
                        new
                        {
                            Id = (short)12,
                            RecordStatus = false,
                            TableId = (short)4,
                            Title = "None"
                        },
                        new
                        {
                            Id = (short)13,
                            RecordStatus = false,
                            TableId = (short)5,
                            Title = "None"
                        },
                        new
                        {
                            Id = (short)14,
                            RecordStatus = false,
                            TableId = (short)5,
                            Title = "Partial"
                        },
                        new
                        {
                            Id = (short)15,
                            RecordStatus = false,
                            TableId = (short)5,
                            Title = "Complete"
                        },
                        new
                        {
                            Id = (short)16,
                            RecordStatus = false,
                            TableId = (short)6,
                            Title = "None"
                        },
                        new
                        {
                            Id = (short)17,
                            RecordStatus = false,
                            TableId = (short)6,
                            Title = "Partial"
                        },
                        new
                        {
                            Id = (short)18,
                            RecordStatus = false,
                            TableId = (short)6,
                            Title = "Complete"
                        },
                        new
                        {
                            Id = (short)19,
                            RecordStatus = false,
                            TableId = (short)7,
                            Title = "None"
                        },
                        new
                        {
                            Id = (short)20,
                            RecordStatus = false,
                            TableId = (short)7,
                            Title = "Partial"
                        },
                        new
                        {
                            Id = (short)21,
                            RecordStatus = false,
                            TableId = (short)7,
                            Title = "Complete"
                        },
                        new
                        {
                            Id = (short)22,
                            RecordStatus = false,
                            TableId = (short)8,
                            Title = "Critical"
                        },
                        new
                        {
                            Id = (short)23,
                            RecordStatus = false,
                            TableId = (short)8,
                            Title = "High"
                        },
                        new
                        {
                            Id = (short)24,
                            RecordStatus = false,
                            TableId = (short)8,
                            Title = "Medium"
                        },
                        new
                        {
                            Id = (short)25,
                            RecordStatus = false,
                            TableId = (short)8,
                            Title = "Low"
                        },
                        new
                        {
                            Id = (short)26,
                            RecordStatus = false,
                            TableId = (short)8,
                            Title = "Information"
                        },
                        new
                        {
                            Id = (short)27,
                            RecordStatus = false,
                            TableId = (short)9,
                            Title = "تایید"
                        },
                        new
                        {
                            Id = (short)28,
                            RecordStatus = false,
                            TableId = (short)9,
                            Title = "عدم تایید"
                        },
                        new
                        {
                            Id = (short)29,
                            RecordStatus = false,
                            TableId = (short)9,
                            Title = "امکان تست وجود ندارد"
                        });
                });

            modelBuilder.Entity("DomainEntities.ToDoTaskAggregate.State", b =>
                {
                    b.Property<short>("Id");

                    b.Property<bool>("RecordStatus");

                    b.Property<string>("Title")
                        .HasMaxLength(50)
                        .IsUnicode(true);

                    b.HasKey("Id");

                    b.ToTable("ToDoTask_States");

                    b.HasData(
                        new
                        {
                            Id = (short)1,
                            RecordStatus = false,
                            Title = "شروع نشده"
                        },
                        new
                        {
                            Id = (short)2,
                            RecordStatus = false,
                            Title = "در حال انجام"
                        },
                        new
                        {
                            Id = (short)3,
                            RecordStatus = false,
                            Title = "انجام شد"
                        });
                });

            modelBuilder.Entity("DomainEntities.ToDoTaskAggregate.ToDoTask", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("AssignedToUserId");

                    b.Property<DateTime?>("CompletionDateTime");

                    b.Property<int>("CreatorUserId");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .IsUnicode(true);

                    b.Property<DateTime?>("DueDateTime");

                    b.Property<DateTime>("EntryDateTime");

                    b.Property<short?>("PriorityId");

                    b.Property<bool>("RecordStatus");

                    b.Property<short?>("StateId");

                    b.Property<string>("Title")
                        .HasMaxLength(300)
                        .IsUnicode(true);

                    b.Property<short?>("UsageTypeId");

                    b.HasKey("Id");

                    b.HasIndex("AssignedToUserId");

                    b.HasIndex("CreatorUserId");

                    b.HasIndex("PriorityId");

                    b.HasIndex("StateId");

                    b.HasIndex("UsageTypeId");

                    b.ToTable("ToDoTasks");
                });

            modelBuilder.Entity("DomainEntities.ToDoTaskAggregate.UsageType", b =>
                {
                    b.Property<short>("Id");

                    b.Property<bool>("RecordStatus");

                    b.Property<string>("Title")
                        .HasMaxLength(50)
                        .IsUnicode(true);

                    b.HasKey("Id");

                    b.ToTable("ToDoTask_UsageTypes");

                    b.HasData(
                        new
                        {
                            Id = (short)1,
                            RecordStatus = false,
                            Title = "تماس تلفنی"
                        },
                        new
                        {
                            Id = (short)2,
                            RecordStatus = false,
                            Title = "جلسه"
                        },
                        new
                        {
                            Id = (short)3,
                            RecordStatus = false,
                            Title = "یادآوری"
                        });
                });

            modelBuilder.Entity("DomainEntities.TopupAccountExcelFormatAggregate.TopupAccountExcelFormatDetail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Column")
                        .HasMaxLength(50)
                        .IsUnicode(true);

                    b.Property<int>("HeaderId");

                    b.Property<string>("MappedColumn")
                        .HasMaxLength(50)
                        .IsUnicode(true);

                    b.Property<bool>("RecordStatus");

                    b.HasKey("Id");

                    b.HasIndex("HeaderId");

                    b.ToTable("TopupAccountExcelFormatDetails");
                });

            modelBuilder.Entity("DomainEntities.TopupAccountExcelFormatAggregate.TopupAccountExcelFormatHeader", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ExcelHeaders")
                        .HasMaxLength(500)
                        .IsUnicode(true);

                    b.Property<bool>("RecordStatus");

                    b.Property<string>("Title")
                        .HasMaxLength(50)
                        .IsUnicode(true);

                    b.HasKey("Id");

                    b.ToTable("TopupAccountExcelFormatHeaders");
                });

            modelBuilder.Entity("DomainEntities.TopupAccountTransaction.TopupAccountTransactionDetail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AccountNumber")
                        .HasMaxLength(30)
                        .IsUnicode(true);

                    b.Property<string>("BranchCode")
                        .HasMaxLength(20)
                        .IsUnicode(true);

                    b.Property<string>("CustomerAccountNumber")
                        .HasMaxLength(30)
                        .IsUnicode(true);

                    b.Property<string>("Extra1")
                        .HasMaxLength(100)
                        .IsUnicode(true);

                    b.Property<string>("Extra2")
                        .HasMaxLength(100)
                        .IsUnicode(true);

                    b.Property<string>("Extra3")
                        .HasMaxLength(100)
                        .IsUnicode(true);

                    b.Property<string>("Extra4")
                        .HasMaxLength(100)
                        .IsUnicode(true);

                    b.Property<string>("FollowupCode")
                        .HasMaxLength(50)
                        .IsUnicode(true);

                    b.Property<string>("FollowupCode2")
                        .HasMaxLength(50)
                        .IsUnicode(true);

                    b.Property<int>("HeaderId");

                    b.Property<bool>("RecordStatus");

                    b.Property<string>("RefrenceCode")
                        .HasMaxLength(20)
                        .IsUnicode(true);

                    b.Property<string>("TransactionAmount");

                    b.Property<string>("TransactionAmountText")
                        .HasMaxLength(50)
                        .IsUnicode(true);

                    b.Property<string>("TransactionDate")
                        .HasMaxLength(20)
                        .IsUnicode(true);

                    b.Property<string>("TransactionStatus")
                        .HasMaxLength(10)
                        .IsUnicode(true);

                    b.Property<string>("TransactionTime")
                        .HasMaxLength(10)
                        .IsUnicode(true);

                    b.Property<string>("TransactionType")
                        .HasMaxLength(10)
                        .IsUnicode(true);

                    b.HasKey("Id");

                    b.HasIndex("HeaderId");

                    b.ToTable("TopupAccountTransactionDetails");
                });

            modelBuilder.Entity("DomainEntities.TopupAccountTransaction.TopupAccountTransactionHeader", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .HasMaxLength(50)
                        .IsUnicode(true);

                    b.Property<bool>("RecordStatus");

                    b.Property<string>("Title")
                        .HasMaxLength(50)
                        .IsUnicode(true);

                    b.Property<DateTime>("UploadDate");

                    b.Property<int>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("TopupAccountTransactionHeaders");
                });

            modelBuilder.Entity("DomainEntities.TopupChannelExcelFormatAggregate.TopupChannelExcelFormatDetail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Column")
                        .HasMaxLength(50)
                        .IsUnicode(true);

                    b.Property<int>("HeaderId");

                    b.Property<string>("MappedColumn")
                        .HasMaxLength(50)
                        .IsUnicode(true);

                    b.Property<bool>("RecordStatus");

                    b.HasKey("Id");

                    b.HasIndex("HeaderId");

                    b.ToTable("TopupChannelExcelFormatDetails");
                });

            modelBuilder.Entity("DomainEntities.TopupChannelExcelFormatAggregate.TopupChannelExcelFormatHeader", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ExcelHeaders")
                        .HasMaxLength(500)
                        .IsUnicode(true);

                    b.Property<bool>("RecordStatus");

                    b.Property<string>("Title")
                        .HasMaxLength(50)
                        .IsUnicode(true);

                    b.HasKey("Id");

                    b.ToTable("TopupChannelExcelFormatHeaders");
                });

            modelBuilder.Entity("DomainEntities.TopupChannelTransaction.TopupChannelTransactionDetail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AmountText")
                        .HasMaxLength(50)
                        .IsUnicode(true);

                    b.Property<string>("ChannelType")
                        .HasMaxLength(10)
                        .IsUnicode(true);

                    b.Property<string>("CustomerAccountNumber")
                        .HasMaxLength(50)
                        .IsUnicode(true);

                    b.Property<string>("Extra1")
                        .HasMaxLength(50)
                        .IsUnicode(true);

                    b.Property<string>("Extra2")
                        .HasMaxLength(20)
                        .IsUnicode(true);

                    b.Property<string>("FollowupCode")
                        .HasMaxLength(50)
                        .IsUnicode(true);

                    b.Property<string>("FollowupCode2")
                        .HasMaxLength(50)
                        .IsUnicode(true);

                    b.Property<int>("HeaderId");

                    b.Property<string>("MobileNumber")
                        .HasMaxLength(50)
                        .IsUnicode(true);

                    b.Property<string>("OperatorName")
                        .HasMaxLength(50)
                        .IsUnicode(true);

                    b.Property<bool>("RecordStatus");

                    b.Property<string>("TransactionAmount");

                    b.Property<string>("TransactionDate")
                        .HasMaxLength(20)
                        .IsUnicode(true);

                    b.Property<string>("TransactionStatus")
                        .HasMaxLength(10)
                        .IsUnicode(true);

                    b.HasKey("Id");

                    b.HasIndex("HeaderId");

                    b.ToTable("TopupChannelTransactionDetails");
                });

            modelBuilder.Entity("DomainEntities.TopupChannelTransaction.TopupChannelTransactionHeader", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .HasMaxLength(50)
                        .IsUnicode(true);

                    b.Property<bool>("RecordStatus");

                    b.Property<string>("Title")
                        .HasMaxLength(50)
                        .IsUnicode(true);

                    b.Property<DateTime>("UploadDate");

                    b.Property<int>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("TopupChannelTransactionHeaders");
                });

            modelBuilder.Entity("DomainEntities.Transaction.TransactionDetail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("Amount");

                    b.Property<string>("Application")
                        .HasMaxLength(50)
                        .IsUnicode(true);

                    b.Property<int>("HeaderId");

                    b.Property<string>("IpAddress")
                        .HasMaxLength(50)
                        .IsUnicode(true);

                    b.Property<DateTime>("LogDate");

                    b.Property<bool>("RecordStatus");

                    b.Property<string>("RefNumber")
                        .HasMaxLength(10)
                        .IsUnicode(true);

                    b.Property<string>("SourcePan")
                        .HasMaxLength(16)
                        .IsUnicode(true);

                    b.Property<string>("SourcePanOrgianl")
                        .HasMaxLength(30)
                        .IsUnicode(true);

                    b.Property<string>("Status")
                        .HasMaxLength(50)
                        .IsUnicode(true);

                    b.Property<string>("TargetPan")
                        .HasMaxLength(16)
                        .IsUnicode(true);

                    b.Property<string>("TargetPanOrgianl")
                        .HasMaxLength(30)
                        .IsUnicode(true);

                    b.Property<string>("Tel")
                        .HasMaxLength(13)
                        .IsUnicode(true);

                    b.Property<DateTime>("TransactionDate");

                    b.Property<string>("TransactionTime")
                        .HasMaxLength(8)
                        .IsUnicode(true);

                    b.Property<string>("UserAgent")
                        .HasMaxLength(50)
                        .IsUnicode(true);

                    b.HasKey("Id");

                    b.HasIndex("HeaderId");

                    b.ToTable("TransactionDetails");
                });

            modelBuilder.Entity("DomainEntities.Transaction.TransactionHeader", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .HasMaxLength(50)
                        .IsUnicode(true);

                    b.Property<bool>("RecordStatus");

                    b.Property<string>("Title")
                        .HasMaxLength(50)
                        .IsUnicode(true);

                    b.Property<DateTime>("UploadDate");

                    b.Property<int>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("TransactionHeaders");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<int>("RoleId");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("ApplicationUser_RoleClaims");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ClaimType = "Permission",
                            ClaimValue = "AccessRights_Index",
                            RoleId = 1
                        },
                        new
                        {
                            Id = 2,
                            ClaimType = "Permission",
                            ClaimValue = "AccessRights_GetDetail",
                            RoleId = 1
                        },
                        new
                        {
                            Id = 3,
                            ClaimType = "Permission",
                            ClaimValue = "AccessRights_AddDetail",
                            RoleId = 1
                        },
                        new
                        {
                            Id = 4,
                            ClaimType = "Permission",
                            ClaimValue = "AccessRights_EditDetail",
                            RoleId = 1
                        },
                        new
                        {
                            Id = 5,
                            ClaimType = "Permission",
                            ClaimValue = "AccessRights_DeleteRows",
                            RoleId = 1
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<int>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("ApplicationUser_Claims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.Property<string>("LoginProvider");

                    b.Property<string>("ProviderKey");

                    b.Property<string>("ProviderDisplayName");

                    b.Property<int>("UserId");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("ApplicationUser_Logins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.Property<int>("UserId");

                    b.Property<string>("LoginProvider");

                    b.Property<string>("Name");

                    b.Property<string>("Value");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("ApplicationUser_Tokens");
                });

            modelBuilder.Entity("DomainEntities.AccessRangeAggregate.AccessRangeDetail", b =>
                {
                    b.HasOne("DomainEntities.AccessRangeAggregate.AccessRangeHeader", "AccessRangeHeader")
                        .WithMany()
                        .HasForeignKey("AccessRangeHeaderId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("DomainEntities.AccessibilityAggregate.Accessibility", b =>
                {
                    b.HasOne("DomainEntities.AclFilesUploadAggregate.AclFilesUpload", "AclFilesUpload")
                        .WithMany()
                        .HasForeignKey("AclFilesUploadId");

                    b.HasOne("DomainEntities.ActionTypeAggregate.ActionType", "ActionTypes")
                        .WithMany()
                        .HasForeignKey("ActionTypesId");

                    b.HasOne("DomainEntities.ServiceAggregate.Service", "DestinationService")
                        .WithMany()
                        .HasForeignKey("DestinationServiceId");

                    b.HasOne("DomainEntities.SystemsAggregate.Systems", "DestinationSystem")
                        .WithMany()
                        .HasForeignKey("DestinationSystemId");

                    b.HasOne("DomainEntities.ProtocolAggregate.Protocol", "Protocols")
                        .WithMany()
                        .HasForeignKey("ProtocolsId");

                    b.HasOne("DomainEntities.RouterAggregate.Router", "Router")
                        .WithMany()
                        .HasForeignKey("RouterId");

                    b.HasOne("DomainEntities.ServiceAggregate.Service", "Service")
                        .WithMany()
                        .HasForeignKey("ServiceId");

                    b.HasOne("DomainEntities.SystemsAggregate.Systems", "SourceSystem")
                        .WithMany()
                        .HasForeignKey("SourceSystemId");

                    b.HasOne("DomainEntities.ApplicationUserAggregate.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("DomainEntities.AccessibilityRequestAggregate.AccessibilityRequest", b =>
                {
                    b.HasOne("DomainEntities.AccessTypeAggregate.AccessType", "AccessibilityType")
                        .WithMany()
                        .HasForeignKey("AccessibilityTypeId");

                    b.HasOne("DomainEntities.ApplicationUserAggregate.ApplicationUser", "ConfirmUser")
                        .WithMany()
                        .HasForeignKey("ConfirmUserId");

                    b.HasOne("DomainEntities.AccessibilityLevelAggregate.AccessibilityLevel", "DestAccessibilityLevel")
                        .WithMany()
                        .HasForeignKey("DestAccessibilityLevelId");

                    b.HasOne("DomainEntities.ProtocolAggregate.Protocol", "DestinationProtocol")
                        .WithMany()
                        .HasForeignKey("DestinationProtocolId");

                    b.HasOne("DomainEntities.ServiceAggregate.Service", "DestinationService")
                        .WithMany()
                        .HasForeignKey("DestinationServiceId");

                    b.HasOne("DomainEntities.SystemsAggregate.Systems", "DestinationSystem")
                        .WithMany()
                        .HasForeignKey("DestinationSystemId");

                    b.HasOne("DomainEntities.DepartmentAggregate.Department", "RequestDepartment")
                        .WithMany()
                        .HasForeignKey("RequestDepartmentId");

                    b.HasOne("DomainEntities.ApplicationUserAggregate.ApplicationUser", "RequestingUser")
                        .WithMany()
                        .HasForeignKey("RequestingUserId");

                    b.HasOne("DomainEntities.ServiceAggregate.Service", "Service")
                        .WithMany()
                        .HasForeignKey("ServiceId");

                    b.HasOne("DomainEntities.AccessibilityLevelAggregate.AccessibilityLevel", "SourceAccessibilityLevel")
                        .WithMany()
                        .HasForeignKey("SourceAccessibilityLevelId");

                    b.HasOne("DomainEntities.ProtocolAggregate.Protocol", "SourceProtocol")
                        .WithMany()
                        .HasForeignKey("SourceProtocolId");

                    b.HasOne("DomainEntities.SystemsAggregate.Systems", "SourceSystem")
                        .WithMany()
                        .HasForeignKey("SourceSystemId");

                    b.HasOne("DomainEntities.DepartmentAggregate.Department", "UserDepartment")
                        .WithMany()
                        .HasForeignKey("UserDepartmentId");
                });

            modelBuilder.Entity("DomainEntities.AclFilesRecordAggregate.AclFilesRecord", b =>
                {
                    b.HasOne("DomainEntities.AclFilesUploadAggregate.AclFilesUpload", "AclFilesUpload")
                        .WithMany("AclFilesRecords")
                        .HasForeignKey("AclFilesUploadId");

                    b.HasOne("DomainEntities.AddressTypeAggregate.AddressType", "DestinationAddressType")
                        .WithMany()
                        .HasForeignKey("DestinationAddressTypeId");

                    b.HasOne("DomainEntities.RouterAggregate.Router", "Router")
                        .WithMany()
                        .HasForeignKey("RouterId");

                    b.HasOne("DomainEntities.AddressTypeAggregate.AddressType", "SourceAddressType")
                        .WithMany()
                        .HasForeignKey("SourceAddressTypeId");
                });

            modelBuilder.Entity("DomainEntities.AclFilesUploadAggregate.AclFilesUpload", b =>
                {
                    b.HasOne("DomainEntities.RouterAggregate.Router", "Router")
                        .WithMany()
                        .HasForeignKey("RouterId");
                });

            modelBuilder.Entity("DomainEntities.ApplicationUserAggregate.ApplicationRoleAuthority", b =>
                {
                    b.HasOne("DomainEntities.ApplicationUserAggregate.ApplicationRole", "ApplicationRole")
                        .WithMany("ApplicationRoleAuthorities")
                        .HasForeignKey("ApplicationRoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("DomainEntities.AuthorityAggregate.Authority", "Authority")
                        .WithMany("ApplicationRoleAuthorities")
                        .HasForeignKey("AuthorityId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("DomainEntities.ApplicationUserAggregate.ApplicationUser", b =>
                {
                    b.HasOne("DomainEntities.BankBranchAggregate.BankBranch", "BankBranch")
                        .WithMany()
                        .HasForeignKey("BankBranchId");

                    b.HasOne("DomainEntities.DepartmentAggregate.Department", "Department")
                        .WithMany()
                        .HasForeignKey("DepartmentId");

                    b.HasOne("DomainEntities.DutyPositionAggregate.DutyPosition", "DutyPosition")
                        .WithMany()
                        .HasForeignKey("DutyPositionId");

                    b.HasOne("DomainEntities.PositionAggregate.Position", "Position")
                        .WithMany()
                        .HasForeignKey("PositionId");
                });

            modelBuilder.Entity("DomainEntities.ApplicationUserAggregate.ApplicationUserAccessRageHeader", b =>
                {
                    b.HasOne("DomainEntities.AccessRangeAggregate.AccessRangeHeader", "AccessRangeHeader")
                        .WithMany("ApplicationUserAccessRageHeaders")
                        .HasForeignKey("AccessRangeHeaderId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("DomainEntities.ApplicationUserAggregate.ApplicationUser", "ApplicationUser")
                        .WithMany("ApplicationUserAccessRageHeaders")
                        .HasForeignKey("ApplicationUserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("DomainEntities.ApplicationUserAggregate.ApplicationUserActivity", b =>
                {
                    b.HasOne("DomainEntities.ApplicationUserAggregate.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("DomainEntities.ApplicationUserAggregate.ApplicationUserRole", b =>
                {
                    b.HasOne("DomainEntities.ApplicationUserAggregate.ApplicationRole", "ApplicationRole")
                        .WithMany("ApplicationUserRoles")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("DomainEntities.ApplicationUserAggregate.ApplicationUser", "ApplicationUser")
                        .WithMany("ApplicationUserRoles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("DomainEntities.BankBranchAggregate.BankBranch", b =>
                {
                    b.HasOne("DomainEntities.BankBranchAggregate.BankBranch", "BranchHead")
                        .WithMany("SubBranchHeads")
                        .HasForeignKey("BranchHeadId");
                });

            modelBuilder.Entity("DomainEntities.ExcelFormatAggregate.ExcelFormatDetail", b =>
                {
                    b.HasOne("DomainEntities.ExcelFormatAggregate.ExcelFormatHeader", "Header")
                        .WithMany()
                        .HasForeignKey("HeaderId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("DomainEntities.InvalidFileItemAggregate.InvalidFileItem", b =>
                {
                    b.HasOne("DomainEntities.AclFilesUploadAggregate.AclFilesUpload", "AclFilesUpload")
                        .WithMany("InvalidFileItems")
                        .HasForeignKey("AclFilesUploadId");
                });

            modelBuilder.Entity("DomainEntities.NotificationAggregate.NotificationItem", b =>
                {
                    b.HasOne("DomainEntities.NotificationAggregate.Category", "Category")
                        .WithMany()
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("DomainEntities.ApplicationUserAggregate.ApplicationUser", "CreatedByUser")
                        .WithMany()
                        .HasForeignKey("CreatedByUserId");

                    b.HasOne("DomainEntities.ApplicationUserAggregate.ApplicationUser", "ForUser")
                        .WithMany()
                        .HasForeignKey("ForUserId");

                    b.HasOne("DomainEntities.ToDoTaskAggregate.ToDoTask", "ToDoTask")
                        .WithMany("NotificationItems")
                        .HasForeignKey("ToDoTaskId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("DomainEntities.PolicyAggregate.Policy", b =>
                {
                    b.HasOne("DomainEntities.ProtocolAggregate.Protocol", "Protocol")
                        .WithMany()
                        .HasForeignKey("ProtocolId");
                });

            modelBuilder.Entity("DomainEntities.SearchLogAggregate.SearchLogDetail", b =>
                {
                    b.HasOne("DomainEntities.ApplicationUserAggregate.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("DomainEntities.SearchLogAggregate.SearchLogTransactionDetail", b =>
                {
                    b.HasOne("DomainEntities.SearchLogAggregate.SearchLogDetail", "SearchLogDetail")
                        .WithMany("SearchLogTransactionDetails")
                        .HasForeignKey("SearchLogDetailId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("DomainEntities.TopupAccountTransaction.TopupAccountTransactionDetail")
                        .WithMany("SearchLogTransactionDetails")
                        .HasForeignKey("TopupAccountTransactionDetailId");

                    b.HasOne("DomainEntities.TopupChannelTransaction.TopupChannelTransactionDetail")
                        .WithMany("SearchLogTransactionDetails")
                        .HasForeignKey("TopupChannelTransactionDetailId");

                    b.HasOne("DomainEntities.Transaction.TransactionDetail", "TransactionDetail")
                        .WithMany("SearchLogTransactionDetails")
                        .HasForeignKey("TransactionDetailId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("DomainEntities.ServiceAggregate.Service", b =>
                {
                    b.HasOne("DomainEntities.ProtocolAggregate.Protocol", "Protocol")
                        .WithMany()
                        .HasForeignKey("ProtocolId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("DomainEntities.ServiceLevelAggregate.ServiceLevel", "ServiceLevel")
                        .WithMany()
                        .HasForeignKey("ServiceLevelId");
                });

            modelBuilder.Entity("DomainEntities.SystemsAggregate.Systems", b =>
                {
                    b.HasOne("DomainEntities.AccessibilityLevelAggregate.AccessibilityLevel", "AccessibilityLevel")
                        .WithMany()
                        .HasForeignKey("AccessibilityLevelId");

                    b.HasOne("DomainEntities.DepartmentAggregate.Department", "Department")
                        .WithMany()
                        .HasForeignKey("DepartmentId");

                    b.HasOne("DomainEntities.AccessibilityLevelAggregate.AccessibilityLevel", "InformationAccessibilityLevel")
                        .WithMany()
                        .HasForeignKey("InformationAccessibilityLevelId");
                });

            modelBuilder.Entity("DomainEntities.ToDoTaskAggregate.ToDoTask", b =>
                {
                    b.HasOne("DomainEntities.ApplicationUserAggregate.ApplicationUser", "AssignedToUser")
                        .WithMany()
                        .HasForeignKey("AssignedToUserId");

                    b.HasOne("DomainEntities.ApplicationUserAggregate.ApplicationUser", "CreatorUser")
                        .WithMany()
                        .HasForeignKey("CreatorUserId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("DomainEntities.SettingAggregate.Priority", "Priority")
                        .WithMany()
                        .HasForeignKey("PriorityId");

                    b.HasOne("DomainEntities.ToDoTaskAggregate.State", "State")
                        .WithMany("ToDoTasks")
                        .HasForeignKey("StateId");

                    b.HasOne("DomainEntities.ToDoTaskAggregate.UsageType", "UsageType")
                        .WithMany()
                        .HasForeignKey("UsageTypeId");
                });

            modelBuilder.Entity("DomainEntities.TopupAccountExcelFormatAggregate.TopupAccountExcelFormatDetail", b =>
                {
                    b.HasOne("DomainEntities.TopupAccountExcelFormatAggregate.TopupAccountExcelFormatHeader", "Header")
                        .WithMany()
                        .HasForeignKey("HeaderId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("DomainEntities.TopupAccountTransaction.TopupAccountTransactionDetail", b =>
                {
                    b.HasOne("DomainEntities.TopupAccountTransaction.TopupAccountTransactionHeader", "Header")
                        .WithMany()
                        .HasForeignKey("HeaderId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("DomainEntities.TopupAccountTransaction.TopupAccountTransactionHeader", b =>
                {
                    b.HasOne("DomainEntities.ApplicationUserAggregate.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("DomainEntities.TopupChannelExcelFormatAggregate.TopupChannelExcelFormatDetail", b =>
                {
                    b.HasOne("DomainEntities.TopupChannelExcelFormatAggregate.TopupChannelExcelFormatHeader", "Header")
                        .WithMany()
                        .HasForeignKey("HeaderId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("DomainEntities.TopupChannelTransaction.TopupChannelTransactionDetail", b =>
                {
                    b.HasOne("DomainEntities.TopupChannelTransaction.TopupChannelTransactionHeader", "Header")
                        .WithMany()
                        .HasForeignKey("HeaderId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("DomainEntities.TopupChannelTransaction.TopupChannelTransactionHeader", b =>
                {
                    b.HasOne("DomainEntities.ApplicationUserAggregate.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("DomainEntities.Transaction.TransactionDetail", b =>
                {
                    b.HasOne("DomainEntities.Transaction.TransactionHeader", "Header")
                        .WithMany("Details")
                        .HasForeignKey("HeaderId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("DomainEntities.Transaction.TransactionHeader", b =>
                {
                    b.HasOne("DomainEntities.ApplicationUserAggregate.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.HasOne("DomainEntities.ApplicationUserAggregate.ApplicationRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.HasOne("DomainEntities.ApplicationUserAggregate.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.HasOne("DomainEntities.ApplicationUserAggregate.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.HasOne("DomainEntities.ApplicationUserAggregate.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
